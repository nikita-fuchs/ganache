{"version":3,"sources":["webpack://Ganache/webpack/universalModuleDefinition","webpack://Ganache/webpack/bootstrap","webpack://Ganache/./lib/utils/to.js","webpack://Ganache/external \"util\"","webpack://Ganache/external \"async\"","webpack://Ganache/external \"ethereumjs-util\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subprovider.js\"","webpack://Ganache/external \"lodash\"","webpack://Ganache/external \"source-map-support/register\"","webpack://Ganache/external \"ethereumjs-account\"","webpack://Ganache/./lib/utils/runtimeerror.js","webpack://Ganache/./lib/utils/transaction.js","webpack://Ganache/external \"ethereumjs-block\"","webpack://Ganache/./lib/utils/log.js","webpack://Ganache/./lib/utils/receipt.js","webpack://Ganache/./lib/utils/errorhelper.js","webpack://Ganache/external \"events\"","webpack://Ganache/./node_modules/web3/src/index.js","webpack://Ganache/./lib/provider.js","webpack://Ganache/./node_modules/ethereumjs-wallet/index.js","webpack://Ganache/./lib/blockchain_double.js","webpack://Ganache/external \"merkle-patricia-tree\"","webpack://Ganache/external \"level-sublevel\"","webpack://Ganache/./lib/database/txserializer.js","webpack://Ganache/./lib/utils/txrejectederror.js","webpack://Ganache/./lib/utils/block_helper.js","webpack://Ganache/./public-exports.js","webpack://Ganache/external \"web3-provider-engine\"","webpack://Ganache/external \"web3-provider-engine/subproviders/subscriptions\"","webpack://Ganache/./lib/subproviders/requestfunnel.js","webpack://Ganache/./lib/subproviders/delayedblockfilter.js","webpack://Ganache/./lib/subproviders/gethdefaults.js","webpack://Ganache/./lib/subproviders/geth_api_double.js","webpack://Ganache/./lib/statemanager.js","webpack://Ganache/external \"ethereumjs-abi\"","webpack://Ganache/external \"ethereumjs-tx\"","webpack://Ganache/external \"ethereumjs-tx/fake\"","webpack://Ganache/external \"assert\"","webpack://Ganache/external \"rlp\"","webpack://Ganache/external \"seedrandom\"","webpack://Ganache/external \"bip39\"","webpack://Ganache/external \"safe-buffer\"","webpack://Ganache/external \"crypto\"","webpack://Ganache/external \"scrypt.js\"","webpack://Ganache/external \"uuid/v4\"","webpack://Ganache/external \"bs58check\"","webpack://Ganache/./node_modules/ethereumjs-wallet/hdkey.js","webpack://Ganache/external \"hdkey\"","webpack://Ganache/external \"ethereumjs-vm\"","webpack://Ganache/external \"heap\"","webpack://Ganache/./lib/database.js","webpack://Ganache/./lib/database/leveluparrayadapter.js","webpack://Ganache/./lib/database/levelupobjectadapter.js","webpack://Ganache/external \"levelup\"","webpack://Ganache/external \"encoding-down\"","webpack://Ganache/./lib/database/filedown.js","webpack://Ganache/external \"abstract-leveldown\"","webpack://Ganache/external \"fs\"","webpack://Ganache/external \"path\"","webpack://Ganache/external \"cachedown\"","webpack://Ganache/./lib/database/blockserializer.js","webpack://Ganache/./lib/database/bufferserializer.js","webpack://Ganache/./lib/database/blocklogsserializer.js","webpack://Ganache/./lib/database/receiptserializer.js","webpack://Ganache/external \"tmp\"","webpack://Ganache/./lib/utils/forkedblockchain.js","webpack://Ganache/./lib/utils/forkedstoragetrie.js","webpack://Ganache/external \"web3-core\"","webpack://Ganache/external \"web3-eth\"","webpack://Ganache/external \"web3-net\"","webpack://Ganache/external \"web3-eth-personal\"","webpack://Ganache/external \"web3-shh\"","webpack://Ganache/external \"web3-bzz\"","webpack://Ganache/external \"web3-utils\"","webpack://Ganache/external \"bn.js\"","webpack://Ganache/external \"eth-sig-util\"","webpack://Ganache/./lib/utils/random.js","webpack://Ganache/./lib/block_tracker.js","webpack://Ganache/./lib/server.js","webpack://Ganache/./lib/webSocketServer.js","webpack://Ganache/external \"websocket\"","webpack://Ganache/./lib/httpServer.js","webpack://Ganache/external \"http\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","utils","buffer","val","data","Buffer","from","stripHexPrefix","isBuffer","hex","indexOf","trim","BN","intToHex","toString","addHexPrefix","_rpcQuantityHexString","this","replace","rpcQuantityHexString","rpcDataHexString","length","Array","fill","join","nullableRpcDataHexString","rpcDataHex","nullableRpcQuantityHexString","rpcQuantityHex","hexWithZeroPadding","digits","number","parseInt","bufVal","toBuffer","bufferToInt","require","inherits","to","abi","RuntimeError","transactions","vmOutput","Error","captureStackTrace","constructor","results","hashes","combine","err","keys","push","apply","tx","result","vm","exception","reason","hash","returnData","return","slice","rawDecode","error","exceptionError","program_counter","runState","programCounter","exceptionResult","message","count","fromResults","EthereumJsTransaction","EthereumJsFakeTransaction","ethUtil","assert","rlp","sign","fakeHash","_hash","arguments","BUFFER_ZERO","fixProps","forEach","fieldName","fieldLength","index","_fields","set","v","raw","configZeroableField","vDescriptors","getOwnPropertyDescriptor","sigV","chainId","Math","floor","_chainId","isFake","configurable","getSenderAddress","_from","Transaction","[object Object]","type","types","none","super","decode","self","isArray","field","initData","signed","fake","json","toAccount","buf","equals","setLengthLeft","input","options","nonce","gasLimit","gas","gasPrice","_type","expectedNonce","isSigned","block","transactionIndex","txns","blockHash","blockNumber","header","includeSignature","items","cacheRaw","rlphash","Log","toJSON","logIndex","transactionHash","address","topics","Receipt","logs","gasUsed","cumulativeGasUsed","contractAddress","status","logsBloom","txHash","map","log","LevelUpOutOfRangeError","len","BlockOutOfRangeError","version","core","Eth","Net","Personal","Shh","Bzz","Web3","_this","packageInit","eth","shh","bzz","setProvider","provider","net","addProviders","ProviderEngine","SubscriptionSubprovider","RequestFunnel","DelayedBlockFilter","GethDefaults","GethApiDouble","BlockTracker","EventEmitter","_","Provider","_applyDefaultOptions","gethApiDouble","engine","blockTracker","blockchain","state","subscriptionSubprovider","manager","addProvider","setMaxListeners","start","sendAsync","send","close","_queueRequest","_processRequestQueue","on","notification","emit","defaultOptions","vmErrorsOnRPCResponse","verbose","asyncRequestProcessing","logger","merge","payload","callback","externalize","cloneDeep","intermediary","response","reportErrorInResponse","JSON","stringify","split","stopMining","stop","_requestQueue","setImmediate","_requestInProgress","args","shift","cleanUpErrorObject","errorObject","stack","transactionMethods","_isTransactionRequest","request","method","_typeof","iterator","obj","crypto","scryptsy","uuidv4","bs58check","msg","decipherBuffer","decipher","concat","update","final","Wallet","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","privKey","generate","icapDirect","randomBytes","max","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getAddressString","getChecksumAddressString","toChecksumAddress","toV3","password","opts","derivedKey","salt","iv","kdf","kdfparams","dklen","prf","pbkdf2Sync","cipher","createCipheriv","ciphertext","mac","sha3","id","random","uuid","cipherparams","getV3Filename","timestamp","Date","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","tmp","fromV1","parse","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","seed","createDecipheriv","IV","fromV3","toLowerCase","fromEthSale","encseed","wallet","ethaddr","Account","Block","VM","Trie","async","Heap","Database","BlockchainDouble","console","trie","db_path","pending_transactions","blockGasLimit","defaultTransactionGasLimit","timeAdjustment","time","debug","allowUnlimitedContractSize","assign","initialize","accounts","latestBlock","stateRoot","stateTrie","createStateTrie","trie_db","getBlock","done","e","enableHomestead","activatePrecompiles","info","opcode","argsNum","in","arg","setTime","createGenesisBlock","eachSeries","accountData","finished","putAccount","account","putBlock","db","createBlock","blocks","last","getEffectiveBlockNumber","getHeight","blockHashes","blockIndex","first","receipts","requests","blockLogs","transactionReceipts","parallel","popBlock","del","pop","series","newLastBlock","clearPendingTransactions","stateManager","cache","flush","parent","getParent","parentNumber","currentTime","parentHash","getQueuedNonce","pendingNonce","queueTransaction","sortByPriceAndNonce","sortedByNonce","arr","nonceSort","a","b","sort","heap","sortedTransactions","size","best","processCall","startingStateRoot","cleanUpAndReturn","changeRoot","revert","runCall","checkpoint","runArgs","skipBalance","skipNonce","runTx","vmerr","processBlock","commit","cleanup","runBlock","totalBlockGasUsage","receipt","txLogs","receiptLog","j","rcpt","toArrayLike","createdAddress","bloom","bitvector","cb","commmitIfNeeded","processNextBlock","undefined","currentTransactions","totalGasLimit","maxGasLimit","processTransactionTrace","params","targetHash","txHashCurrentlyProcessing","txCurrentlyProcessing","storageStack","currentDepth","returnVal","returnValue","structLogs","stepListener","event","next","gasLeft","gasUsedThisStep","memory","disableMemory","match","lastItem","disableStack","item","structLog","depth","gasCost","op","pc","storage","disableStorage","processStorageTrace","beforeTxListener","afterTxListener","removeListener","getTransactionReceipt","targetBlock","getContractStorage","getAccount","currentStateRoot","getNonce","getBalance","balance","getStorage","position","getCode","code","getTransaction","notFound","getBlockLogs","effective","getTime","increaseTime","seconds","date","now","encode","fromJSON","TXRejectedError","includeFullTransactions","mixHash","sha3Uncles","uncleHash","transactionsRoot","transactionsTrie","receiptsRoot","receiptTrie","miner","coinbase","difficulty","totalDifficulty","extraData","toJsonRpc","uncles","Server","server","_webpacked","Subprovider","methods","eth_call","eth_getStorageAt","eth_sendTransaction","eth_sendRawTransaction","eth_newBlockFilter","eth_getFilterChanges","eth_getFilterLogs","queue","isWorking","handleRequest","end","external","processNext","watching","handleNewBlockFilter","handleGetFilterChanges","filterId","currentBlockHash","previousBlockHash","emitPayload","res","StateManager","blockHelper","pkg","initialized","initialization_error","post_initialization_callbacks","callbacks","waitForInitialization","addedBlockParam","requiresDefaultBlockParameter","minLength","errorMessage","getDelayedHandler","eth_getBalance","eth_getCode","eth_getTransactionCount","eth_estimateGas","eth_accounts","eth_blockNumber","eth_coinbase","eth_mining","is_mining","eth_hashrate","eth_gasPrice","eth_getBlockByNumber","eth_getBlockByHash","eth_getBlockTransactionCountByNumber","eth_getBlockTransactionCountByHash","eth_getTransactionReceipt","eth_getTransactionByHash","eth_getTransactionByBlockHashAndIndex","hashOrNumber","eth_getTransactionByBlockNumberAndIndex","getTransactionCount","eth_sign","dataToSign","eth_signTypedData","typedDataToSign","signTypedData","txData","rawTx","queueRawTransaction","queueStorage","latestFilterId","mine","eth_getLogs","filter","getLogs","eth_uninstallFilter","eth_protocolVersion","bzz_hive","bzz_info","shh_version","eth_getCompilers","eth_syncing","net_listening","net_peerCount","web3_clientVersion","web3_sha3","string","net_version","miner_start","threads","startMining","miner_stop","rpc_modules","rpc","web3","evm","personal","personal_listAccounts","personal_accounts","personal_newAccount","createAccount","account_passwords","personal_importRawKey","rawKey","secretKey","personal_lockAccount","unlocked_accounts","personal_unlockAccount","duration","storedPassword","personal_sendTransaction","ret","evm_snapshot","snapshot","evm_revert","snapshotId","evm_increaseTime","evm_setTime","evm_mine","debug_traceTransaction","queueTransactionTrace","eth_getUncleCountByBlockHash","eth_getUncleCountByBlockNumber","eth_getUncleByBlockHashAndIndex","eth_getUncleByBlockNumberAndIndex","uncleIndex","eth_getWork","eth_submitWork","powHash","digest","eth_submitHashrate","hashRate","clientID","db_putString","dbName","db_getString","db_putHex","db_getHex","shh_post","priority","ttl","shh_newIdentity","shh_hasIdentity","shh_newGroup","shh_addToGroup","shh_newFilter","shh_uninstallFilter","shh_getFilterChanges","shh_getMessages","seedrandom","bip39","hdkey","ForkedBlockchain","sigUtil","ZERO_BUFFER","fork","secure","total_accounts","latest_filter_id","action_queue","action_processing","snapshots","network_id","mnemonic","fromMasterSeed","mnemonicToSeed","wallet_hdpath","hdPath","gasPriceVal","blockTime","is_mining_on_interval","mining_interval_timeout","_provider","default_balance_ether","randomAlphaNumericString","entropyToMnemonic","defaultBalanceWei","toWei","reduce","idx","forkVersion","mineOnInterval","_minerCancellationToken","clearTimeout","cancelled","cancellationToken","timeout","setTimeout","unref","derivePath","getWallet","publicKey","_queueTransaction","processNextAction","txJsonRpc","isKnownAccount","_setTransactionDefaults","allocUnsafe","override","queued","processTransaction","processGasEstimate","msgHash","hashPersonalMessage","sgn","ecsign","toRpcSig","EIP712Domain","domain","primaryType","printTransactionReceipt","runtimeError","finishedPrinting","processBlocks","totalBlocks","amountProcessed","whilst","createTransactionWithCorrectNonce","gasRefund","add","expectedAddress","expectedTopics","fromBlock","toBlock","current","filtered","keep","expectedTopic","logTopic","isMatch","includes","nextSnapshot","during","doneWithTest","nextBlock","hasContractCode","getContractCode","isUnlocked","validateNonce","Promise","resolve","expected","actual","reject","then","catch","HDKey","EthereumHDKey","fromHDKey","_hdkey","seedBuffer","fromExtendedKey","base58key","privateExtendedKey","publicExtendedKey","path","derive","deriveChild","_privateKey","_publicKey","LevelUpArrayAdapter","LevelUpObjectAdapter","levelup","filedown","cachedown","txserializer","blockserializer","bufferserializer","BlockLogsSerializer","ReceiptSerializer","finishInitializing","dir","getDir","directory","levelupOptions","valueEncoding","store","maxSize","Sublevel","serializer","sublevel","_get","_put","encoded","put","RangeError","newLength","valueserializer","keyserializer","encodedKey","decodedValue","batch","array","each","isOpen","util","AbstractLevelDOWN","fs","FileDown","location","_open","writeFile","readFile","_del","unlink","_batch","txJson","database","ForkedStorageTrie","forkBlockNumber","providers","HttpProvider","storageTrieCache","getId","_lookupStorageTrie","lookupStorageTrie","_lookupAccount","putContractCode","putCode","createForkedStorageTrie","isFallbackBlock","isBlockHash","isFallbackBlockHash","getFallbackBlock","numberOrHash","toBN","transactionTrie","real","getRelativeBlockNumber","getBlockReference","blockReference","keyExists","exists","fetchCodeFromFallback","setCode","serialize","acc","fetchAccountFromFallback","receiptJson","fetchBalanceFromFallback","fetchNonceFromFallback","getSafeFallbackBlockNumber","safeBlockNumber","relative","currentProvider","jsonrpc","_checkpointTrie","customCheckpoint","_revertTrie","checkpoints","customRevert","MerklePatriciaTree","findPath","node","remainder","getStorageAt","rng","alphabet","text","charAt","GanacheBlockTracker","_blockchain","getTrackingBlock","awaitCurrentBlock","_setCurrentBlock","_currentBlock","getCurrentBlock","once","_isRunning","newBlock","oldBlock","webSocketServer","httpServer","keepAliveTimeout","connectionCounter","connections","conn","oldListen","listen","ws","oldClose","destroy","WebSocketServer","ConnectionManager","connectionsBySubscriptionId","_updateSubscriptions","manageConnection","_logPayload","_handleRequest","connectionManager","wsServer","autoAcceptConnections","connection","subscriptions","utf8Data","subscriptionId","subscription","http","createServer","body","chunk","headers","Access-Control-Allow-Headers","Access-Control-Allow-Origin","Access-Control-Allow-Methods","writeHead","Content-Type","ganacheProvider"],"mappings":"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","file":"ganache.core.node.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Ganache\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ganache\"] = factory();\n\telse\n\t\troot[\"Ganache\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 24);\n","let utils = require(\"ethereumjs-util\");\n\nmodule.exports = {\n  buffer: function(val) {\n    let data;\n    if (typeof val === \"string\") {\n      // strings need to be treated as hex, so we have to prep them:\n      data = Buffer.from(utils.stripHexPrefix(val), \"hex\");\n    } else if (Buffer.isBuffer(val)) {\n      // no need to copy the Buffer to a new Buffer, so we just use the Buffer\n      // exactly as it was given to us:\n      data = val;\n    } else {\n      // all other types get the Buffer treatment and built-in type checking:\n      data = Buffer.from(val);\n    }\n    return data;\n  },\n  // Note: Do not use to.hex() when you really mean utils.addHexPrefix().\n  hex: function(val) {\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") === 0) {\n        return val.trim();\n      } else {\n        val = new utils.BN(val);\n      }\n    }\n\n    if (typeof val === \"boolean\") {\n      val = val ? 1 : 0;\n    }\n\n    if (typeof val === \"number\") {\n      val = utils.intToHex(val);\n    } else if (val == null) {\n      return \"0x\";\n    } else if (typeof val === \"object\") {\n      // Support Buffer, BigInteger and BN library\n      // Hint: BN is used in ethereumjs\n      val = val.toString(\"hex\");\n    }\n\n    return utils.addHexPrefix(val);\n  },\n\n  _rpcQuantityHexString: function(val) {\n    val = this.hex(val);\n    // remove all zeroes leading zeros, `0+`, from the hex-encoded value\n    // This doesn't remove the last 0 which would be captured by `(.+?)`\n    val = val.replace(/^(?:0x)(?:0+(.+?))?$/, \"0x$1\");\n    return val;\n  },\n\n  rpcQuantityHexString: function(val) {\n    val = this._rpcQuantityHexString(val);\n\n    // RPC Quantities must represent `0` as `0x0`\n    if (val === \"0x\") {\n      val = \"0x0\";\n    }\n\n    return val;\n  },\n\n  rpcDataHexString: function(val, length) {\n    if (typeof length === \"number\") {\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      val = new Array(length - val.length).fill(\"0\").join(\"\") + val;\n    } else {\n      if (val.length === 0) {\n        return \"0x\";\n      }\n      val = this.hex(val).replace(\"0x\", \"\");\n\n      if (val.length % 2 !== 0) {\n        val = \"0\" + val;\n      }\n    }\n    return \"0x\" + val;\n  },\n\n  nullableRpcDataHexString: function(val, length) {\n    const rpcDataHex = this.rpcDataHexString(val, length);\n    return rpcDataHex === \"0x\" ? null : rpcDataHex;\n  },\n\n  nullableRpcQuantityHexString: function(val) {\n    const rpcQuantityHex = this._rpcQuantityHexString(val);\n    return rpcQuantityHex === \"0x\" ? null : rpcQuantityHex;\n  },\n\n  hexWithZeroPadding: function(val) {\n    val = this.hex(val);\n    const digits = val.replace(\"0x\", \"\");\n    if (digits.length & 0x1) {\n      return \"0x0\" + digits;\n    }\n    return val;\n  },\n\n  number: function(val) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      if (val.indexOf(\"0x\") !== 0) {\n        return parseInt(val, 10);\n      }\n    }\n    var bufVal = utils.toBuffer(val);\n    return utils.bufferToInt(bufVal);\n  }\n};\n","module.exports = require(\"util\");","module.exports = require(\"async\");","module.exports = require(\"ethereumjs-util\");","module.exports = require(\"web3-provider-engine/subproviders/subprovider.js\");","module.exports = require(\"lodash\");","module.exports = require(\"source-map-support/register\");","module.exports = require(\"ethereumjs-account\");","var inherits = require(\"util\").inherits;\nvar to = require(\"./to\");\nvar abi = require(\"ethereumjs-abi\");\n\ninherits(RuntimeError, Error);\n\n// Note: ethereumjs-vm will return an object that has a \"results\" and \"receipts\" keys.\n// You should pass in the whole object.\nfunction RuntimeError(transactions, vmOutput) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n\n  this.results = {};\n  this.hashes = [];\n\n  // handles creating this.message\n  this.combine(transactions, vmOutput);\n}\n\nRuntimeError.prototype.combine = function(transactions, vmOutput) {\n  // Can be combined with vmOutput or another RuntimeError.\n  if (transactions instanceof RuntimeError) {\n    var err = transactions;\n    var keys = Object.keys(err.results);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      this.results[key] = err.results[key];\n      Array.prototype.push.apply(this.hashes, err.hashes);\n    }\n  } else {\n    var results = vmOutput.results;\n\n    for (i = 0; i < transactions.length; i++) {\n      var tx = transactions[i];\n      var result = results[i];\n\n      // 1 means no error, oddly.\n      if (result.vm.exception !== 1) {\n        var hash = to.hex(tx.hash());\n        this.hashes.push(hash);\n        var reason;\n        var returnData = result.vm.return;\n        if (returnData && returnData.slice(0, 4).toString(\"hex\") === \"08c379a0\") {\n          reason = abi.rawDecode([\"string\"], returnData.slice(4))[0];\n        }\n\n        this.results[hash] = {\n          error: result.vm.exceptionError.error || result.vm.exceptionError,\n          program_counter: result.vm.runState.programCounter,\n          return: to.hex(result.vm.return),\n          reason: reason\n        };\n      }\n    }\n  }\n\n  // Once combined, set the message\n  if (this.hashes.length === 1) {\n    var exceptionResult = this.results[this.hashes[0]];\n    var message = \"VM Exception while processing transaction: \" + exceptionResult.error;\n    if (exceptionResult.reason) {\n      message += \" \" + exceptionResult.reason;\n    }\n    this.message = message;\n  } else {\n    message = \"Multiple VM Exceptions while processing transactions: \\n\\n\";\n\n    for (i = 0; i < this.hashes.length; i++) {\n      hash = this.hashes[i];\n      exceptionResult = this.results[hash];\n      message += hash + \": \" + exceptionResult.error;\n      if (exceptionResult.reason) {\n        message += \" \" + exceptionResult.reason;\n      }\n      message += \"\\n\";\n    }\n    this.message = message;\n  }\n};\n\nRuntimeError.prototype.count = function() {\n  return Object.keys(this.results).length;\n};\n\nRuntimeError.fromResults = function(transactions, vmOutput) {\n  var err = new RuntimeError(transactions, vmOutput);\n\n  if (err.count() === 0) {\n    return null;\n  }\n\n  return err;\n};\n\nmodule.exports = RuntimeError;\n","const EthereumJsTransaction = require(\"ethereumjs-tx\");\nconst EthereumJsFakeTransaction = require(\"ethereumjs-tx/fake\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst assert = require(\"assert\");\nconst rlp = require(\"rlp\");\nconst to = require(\"./to\");\n\nconst sign = EthereumJsTransaction.prototype.sign;\nconst fakeHash = function() {\n  // this isn't memoization of the hash. previous versions of ganache-core\n  // created hashes in a different/incorrect way and are recorded this way\n  // in snapshot dbs. We are preserving the chain's immutability by using the\n  // stored hash instead of calculating it.\n  if (this._hash != null) {\n    return this._hash;\n  }\n  return EthereumJsFakeTransaction.prototype.hash.apply(this, arguments);\n};\nconst BUFFER_ZERO = Buffer.from([0]);\n\nfunction configZeroableField(tx, fieldName, fieldLength = 32) {\n  const index = tx._fields.indexOf(fieldName);\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, fieldName, {\n    set: (v) => {\n      v = ethUtil.toBuffer(v);\n      assert(fieldLength >= v.length, `The field ${fieldName} must not have more ${fieldLength} bytes`);\n      tx.raw[index] = v;\n    }\n  });\n}\n\n/**\n * etheruemjs-tx's Transactions don't behave quite like we need them to, so\n * we're monkey-patching them to do what we want here.\n * @param {Transaction} tx The Transaction to fix\n * @param {Object} [data] The data object\n */\nfunction fixProps(tx, data) {\n  // ethereumjs-tx doesn't allow for a `0` value in fields, but we want it to\n  // in order to differentiate between a value that isn't set and a value\n  // that is set to 0 in a fake transaction.\n  // Once https://github.com/ethereumjs/ethereumjs-tx/issues/112 is fixed we\n  // can probably remove this fix.\n  const fieldNames = [\"nonce\", \"gasPrice\", \"gasLimit\", \"value\"];\n  fieldNames.forEach((fieldName) => configZeroableField(tx, fieldName, 32));\n\n  // Ethereumjs-tx doesn't set the _chainId value whenever the v value is set,\n  // which causes transaction signing to fail on transactions that include a\n  // chain id in the v value (like ethers.js does).\n  // Whenever the v value changes we need to make sure the chainId is also set.\n  const vDescriptors = Object.getOwnPropertyDescriptor(tx, \"v\");\n  // eslint-disable-next-line accessor-pairs\n  Object.defineProperty(tx, \"v\", {\n    set: (v) => {\n      vDescriptors.set.call(tx, v);\n      // calculate chainId from signature\n      const sigV = ethUtil.bufferToInt(tx.v);\n      let chainId = Math.floor((sigV - 35) / 2);\n      if (chainId < 0) {\n        chainId = 0;\n      }\n      tx._chainId = chainId || 0;\n    }\n  });\n\n  if (tx.isFake()) {\n    /**\n     * @prop {Buffer} from (read/write) Set from address to bypass transaction\n     * signing on fake transactions.\n     */\n    Object.defineProperty(tx, \"from\", {\n      enumerable: true,\n      configurable: true,\n      get: tx.getSenderAddress.bind(tx),\n      set: (val) => {\n        if (val) {\n          tx._from = ethUtil.toBuffer(val);\n        } else {\n          tx._from = null;\n        }\n      }\n    });\n\n    if (data && data.from) {\n      tx.from = data.from;\n    }\n\n    tx.hash = fakeHash;\n  }\n}\n\n/**\n * Parses the given data object and adds its properties to the given tx.\n * @param {Transaction} tx\n * @param {Object} [data]\n */\nfunction initData(tx, data) {\n  if (data) {\n    if (typeof data === \"string\") {\n      data = Buffer.from(ethUtil.stripHexPrefix(data), \"hex\");\n    }\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n    const self = tx;\n    if (Array.isArray(data)) {\n      if (data.length > tx._fields.length) {\n        throw new Error(\"wrong number of fields in data\");\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = ethUtil.toBuffer(d);\n      });\n    } else if ((typeof data === \"undefined\" ? \"undefined\" : typeof data) === \"object\") {\n      const keys = Object.keys(data);\n      tx._fields.forEach(function(field) {\n        if (keys.indexOf(field) !== -1) {\n          self[field] = data[field];\n        }\n        if (field === \"gasLimit\") {\n          if (keys.indexOf(\"gas\") !== -1) {\n            self[\"gas\"] = data[\"gas\"];\n          }\n        } else if (field === \"data\") {\n          if (keys.indexOf(\"input\") !== -1) {\n            self[\"input\"] = data[\"input\"];\n          }\n        }\n      });\n\n      // Set chainId value from the data, if it's there and the data didn't\n      // contain a `v` value with chainId in it already. If we do have a\n      // data.chainId value let's set the interval v value to it.\n      if (!tx._chainId && data && data.chainId != null) {\n        tx.raw[self._fields.indexOf(\"v\")] = tx._chainId = data.chainId || 0;\n      }\n    } else {\n      throw new Error(\"invalid data\");\n    }\n  }\n}\n\nmodule.exports = class Transaction extends EthereumJsTransaction {\n  /**\n   * @param {Object} [data] The data for this Transaction.\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  constructor(data, type = Transaction.types.none) {\n    super();\n\n    this.type = type;\n\n    fixProps(this, data);\n    initData(this, data);\n  }\n\n  static get types() {\n    // values must be powers of 2\n    return {\n      none: 0,\n      signed: 1,\n      fake: 2\n    };\n  }\n\n  /**\n   * Prepares arbitrary JSON data for use in a Transaction.\n   * @param {Object} json JSON object representing the Transaction\n   * @param {Number} type The `Transaction.types` bit flag for this transaction\n   *  Can be a combination of `Transaction.types.none`, `Transaction.types.signed`, and `Transaction.types.fake`.\n   */\n  static fromJSON(json, type) {\n    let toAccount;\n    if (json.to) {\n      // Remove all padding and make it easily comparible.\n      const buf = to.buffer(json.to);\n      if (buf.equals(Buffer.from([0]))) {\n        // if the address is 0x0 make it 0x0{20}\n        toAccount = ethUtil.setLengthLeft(buf, 20);\n      } else {\n        toAccount = buf;\n      }\n    }\n    const data = json.data || json.input;\n    const options = {\n      nonce: ethUtil.toBuffer(to.hex(json.nonce)),\n      from: ethUtil.toBuffer(to.hex(json.from)),\n      value: ethUtil.toBuffer(to.hex(json.value)),\n      gasLimit: ethUtil.toBuffer(to.hex(json.gas || json.gasLimit)),\n      gasPrice: ethUtil.toBuffer(to.hex(json.gasPrice)),\n      data: data ? Buffer.from(ethUtil.stripHexPrefix(data), \"hex\") : null,\n      to: toAccount,\n      v: ethUtil.toBuffer(json.v),\n      r: ethUtil.toBuffer(json.r),\n      s: ethUtil.toBuffer(json.s)\n    };\n\n    const tx = new Transaction(options, type);\n    tx._hash = json.hash ? Buffer.from(ethUtil.stripHexPrefix(json.hash), \"hex\") : null;\n    return tx;\n  }\n\n  /**\n   * Encodes the Transaction in order to be used in a database. Can be decoded\n   * into an identical Transaction via `Transaction.decode(encodedTx)`.\n   */\n  encode() {\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(this.hash()),\n      nonce: to.nullableRpcQuantityHexString(this.nonce) || \"0x\",\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.nullableRpcQuantityHexString(this.value),\n      gas: to.nullableRpcQuantityHexString(this.gasLimit),\n      gasPrice: to.nullableRpcQuantityHexString(this.gasPrice),\n      data: this.data ? this.data.toString(\"hex\") : null,\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s),\n      _type: this.type\n    };\n    return resultJSON;\n  }\n\n  isFake() {\n    return (this.type & Transaction.types.fake) === Transaction.types.fake;\n  }\n\n  isSigned() {\n    return (this.type & Transaction.types.signed) === Transaction.types.signed;\n  }\n\n  /**\n   * Compares the transaction's nonce value to the given expectedNonce taking in\n   * to account the type of transaction and comparison rules for each type.\n   *\n   * In a signed transaction a nonce of Buffer([]) is the same as Buffer([0]),\n   * but in a fake transaction Buffer([]) is null and Buffer([0]) is 0.\n   *\n   * @param {Buffer} expectedNonce The value of the from account's next nonce.\n   */\n  validateNonce(expectedNonce) {\n    let nonce;\n    if (this.isSigned() && this.nonce.length === 0) {\n      nonce = BUFFER_ZERO;\n    } else {\n      nonce = this.nonce;\n    }\n    return nonce.equals(expectedNonce);\n  }\n\n  /**\n   * Signs the transaction and sets the `type` bit for `signed` to 1,\n   * i.e., `isSigned() === true`\n   */\n  sign() {\n    sign.apply(this, arguments);\n    this.type |= Transaction.types.signed;\n  }\n\n  /**\n   * Returns a JSON-RPC spec compliant representation of this Transaction.\n   *\n   * @param {Object} block The block this Transaction appears in.\n   */\n  toJsonRpc(block) {\n    const hash = this.hash();\n\n    let transactionIndex = 0;\n    for (let i = 0, txns = block.transactions, l = txns.length; i < l; i++) {\n      if (txns[i].hash().equals(hash)) {\n        transactionIndex = i;\n        break;\n      }\n    }\n\n    const resultJSON = {\n      hash: to.nullableRpcDataHexString(hash),\n      nonce: to.rpcQuantityHexString(this.nonce),\n      blockHash: to.nullableRpcDataHexString(block.hash()),\n      blockNumber: to.nullableRpcQuantityHexString(block.header.number),\n      transactionIndex: to.rpcQuantityHexString(transactionIndex),\n      from: to.rpcDataHexString(this.from),\n      to: to.nullableRpcDataHexString(this.to),\n      value: to.rpcQuantityHexString(this.value),\n      gas: to.rpcQuantityHexString(this.gasLimit),\n      gasPrice: to.rpcQuantityHexString(this.gasPrice),\n      input: to.rpcDataHexString(this.data),\n      v: to.nullableRpcQuantityHexString(this.v),\n      r: to.nullableRpcDataHexString(this.r),\n      s: to.nullableRpcDataHexString(this.s)\n    };\n\n    return resultJSON;\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   *\n   * This method is nearly identical to ethereumjs-tx hash with the exception of\n   * the v,r,s value setting when _chainId > 0. Because the `_chainId` in our\n   * implementation is calculated whenever the v is updated we have to make sure\n   * we don't recalc the chainId when we set the v to soemthing else.\n   *\n   * Note: If the transaction is a fake transaction this hash method gets\n   * overridden in the constructor.\n   *\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n  hash(includeSignature = true) {\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    let items;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      // cache the chainId here\n      const chainId = this._chainId;\n      if (chainId > 0) {\n        const cacheRaw = this.raw.slice();\n        // Setting `this.v` changes the value of `this._chainId`\n        this.v = chainId;\n        this.r = 0;\n        this.s = 0;\n\n        items = this.raw;\n        this.raw = cacheRaw;\n        // set the chainId back to its original value here.\n        this._chainId = chainId;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  }\n};\n","module.exports = require(\"ethereumjs-block\");","var to = require(\"./to.js\");\n\n// Expects:\n//\n// logIndex: ...\n// transactionIndex: ...\n// transactionHash: ...\n// block: ...\n// address: ...\n// data: ...\n// topics: ...\n// type: ...\n\nfunction Log(data) {\n  var self = this;\n  Object.keys(data).forEach(function(key) {\n    self[key] = data[key];\n  });\n}\n\nLog.prototype.toJSON = function() {\n  // RPC quantity values like this.transactionIndex can be set to \"0x00\",\n  // use the explicit rpcQuantityHexString to properly format the JSON, removing leading zeroes.\n  // See RPC log format spec: https://github.com/ethereum/wiki/wiki/JSON-RPC\n  return {\n    logIndex: to.rpcQuantityHexString(this.logIndex),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    transactionHash: to.rpcDataHexString(this.transactionHash),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    address: to.rpcDataHexString(this.address),\n    data: to.rpcDataHexString(this.data),\n    topics: this.topics,\n    type: \"mined\"\n  };\n};\n\nmodule.exports = Log;\n","var to = require(\"./to\");\n\nfunction Receipt(tx, block, logs, gasUsed, cumulativeGasUsed, contractAddress, status, logsBloom) {\n  this.tx = tx;\n  this.block = block;\n  this.logs = logs;\n  this.gasUsed = gasUsed;\n  this.cumulativeGasUsed = cumulativeGasUsed;\n  this.contractAddress = contractAddress;\n  this.status = status;\n  this.logsBloom = logsBloom;\n\n  this.transactionIndex = 0;\n\n  this.txHash = tx.hash();\n\n  for (var i = 0; i < block.transactions.length; i++) {\n    var current = block.transactions[i];\n    if (current.hash().equals(this.txHash)) {\n      this.transactionIndex = i;\n      break;\n    }\n  }\n}\n\nReceipt.prototype.toJSON = function() {\n  // Enforce Hex formatting as defined in the RPC spec.\n  return {\n    transactionHash: to.rpcDataHexString(this.txHash),\n    transactionIndex: to.rpcQuantityHexString(this.transactionIndex),\n    blockHash: to.rpcDataHexString(this.block.hash()),\n    blockNumber: to.rpcQuantityHexString(this.block.header.number),\n    from: to.rpcDataHexString(this.tx.from),\n    to: to.nullableRpcDataHexString(this.tx.to),\n    gasUsed: to.rpcQuantityHexString(this.gasUsed),\n    cumulativeGasUsed: to.rpcQuantityHexString(this.cumulativeGasUsed),\n    contractAddress: this.contractAddress != null ? to.rpcDataHexString(this.contractAddress) : null,\n    logs: this.logs.map(function(log) {\n      return log.toJSON();\n    }),\n    status: to.rpcQuantityHexString(this.status),\n    logsBloom: to.rpcDataHexString(this.logsBloom),\n    v: to.rpcDataHexString(this.tx.v),\n    r: to.rpcDataHexString(this.tx.r),\n    s: to.rpcDataHexString(this.tx.s)\n  };\n};\n\nmodule.exports = Receipt;\n","class LevelUpOutOfRangeError extends Error {\n  constructor(type, index, len) {\n    const message = \"LevelUpArrayAdapter named '\" + type + \"' index out of range: index \" + index + \"; length: \" + len;\n    super(message);\n    this.name = `${this.constructor.name}:${type}`;\n    this.type = type;\n  }\n}\n\nclass BlockOutOfRangeError extends LevelUpOutOfRangeError {\n  constructor(index, len) {\n    super(\"blocks\", index, len);\n  }\n}\n\nmodule.exports = {\n  LevelUpOutOfRangeError,\n  BlockOutOfRangeError\n};\n","module.exports = require(\"events\");","/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @authors:\n *   Fabian Vogelsteller <fabian@ethereum.org>\n *   Gav Wood <gav@parity.io>\n *   Jeffrey Wilcke <jeffrey.wilcke@ethereum.org>\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea <marian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar version = require('../package.json').version;\nvar core = require('web3-core');\nvar Eth = require('web3-eth');\nvar Net = require('web3-net');\nvar Personal = require('web3-eth-personal');\nvar Shh = require('web3-shh');\nvar Bzz = require('web3-bzz');\nvar utils = require('web3-utils');\n\nvar Web3 = function Web3() {\n    var _this = this;\n\n    // sets _requestmanager etc\n    core.packageInit(this, arguments);\n\n    this.version = version;\n    this.utils = utils;\n\n    this.eth = new Eth(this);\n    this.shh = new Shh(this);\n    this.bzz = new Bzz(this);\n\n    // overwrite package setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function (provider, net) {\n        setProvider.apply(_this, arguments);\n\n        this.eth.setProvider(provider, net);\n        this.shh.setProvider(provider, net);\n        this.bzz.setProvider(provider);\n\n        return true;\n    };\n};\n\nWeb3.version = version;\nWeb3.utils = utils;\nWeb3.modules = {\n    Eth: Eth,\n    Net: Net,\n    Personal: Personal,\n    Shh: Shh,\n    Bzz: Bzz\n};\n\ncore.addProviders(Web3);\n\nmodule.exports = Web3;\n\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nlet ProviderEngine = require(\"web3-provider-engine\");\nlet SubscriptionSubprovider = require(\"web3-provider-engine/subproviders/subscriptions\");\n\nlet RequestFunnel = require(\"./subproviders/requestfunnel\");\nlet DelayedBlockFilter = require(\"./subproviders/delayedblockfilter\");\nlet GethDefaults = require(\"./subproviders/gethdefaults\");\nlet GethApiDouble = require(\"./subproviders/geth_api_double\");\n\nlet BlockTracker = require(\"./block_tracker\");\n\nlet RuntimeError = require(\"./utils/runtimeerror\");\nlet EventEmitter = require(\"events\");\n\nlet _ = require(\"lodash\");\n\nfunction Provider(options) {\n  const self = this;\n  EventEmitter.call(this);\n\n  this.options = options = self._applyDefaultOptions(options || {});\n\n  let gethApiDouble = new GethApiDouble(options, this);\n\n  this.engine = new ProviderEngine({\n    blockTracker: new BlockTracker({ blockchain: gethApiDouble.state.blockchain })\n  });\n\n  let subscriptionSubprovider = new SubscriptionSubprovider();\n\n  this.engine.manager = gethApiDouble;\n  this.engine.addProvider(new RequestFunnel());\n  this.engine.addProvider(new DelayedBlockFilter());\n  this.engine.addProvider(subscriptionSubprovider);\n  this.engine.addProvider(new GethDefaults());\n  this.engine.addProvider(gethApiDouble);\n\n  this.engine.setMaxListeners(100);\n  this.engine.start();\n\n  this.manager = gethApiDouble;\n  this.sendAsync = this.send.bind(this);\n  this.send = this.send.bind(this);\n  this.close = this.close.bind(this);\n  this._queueRequest = this._queueRequest.bind(this);\n  this._processRequestQueue = this._processRequestQueue.bind(this);\n\n  subscriptionSubprovider.on(\"data\", function(err, notification) {\n    self.emit(\"data\", err, notification);\n  });\n}\n\nconst defaultOptions = {\n  vmErrorsOnRPCResponse: true,\n  verbose: false,\n  asyncRequestProcessing: false,\n  logger: {\n    log: function() {}\n  }\n};\n\nProvider.prototype = Object.create(EventEmitter.prototype);\nProvider.prototype.constructor = Provider;\n\nProvider.prototype._applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n\nProvider.prototype.send = function(payload, callback) {\n  if (typeof callback !== \"function\") {\n    throw new Error(\n      \"No callback provided to provider's send function. As of web3 1.0, provider.send \" +\n        \"is no longer synchronous and must be passed a callback as its final argument.\"\n    );\n  }\n\n  let self = this;\n\n  let externalize = function(payload) {\n    return _.cloneDeep(payload);\n  };\n\n  if (Array.isArray(payload)) {\n    payload = payload.map(externalize);\n  } else {\n    payload = externalize(payload);\n  }\n\n  let intermediary = function(err, result) {\n    // clone result so that we can mutate the response without worrying about\n    // that messing up assumptions the calling logic might have about us\n    // mutating things\n    result = _.cloneDeep(result);\n    let response;\n    if (Array.isArray(result)) {\n      response = [];\n      for (let i = 0; i < result.length; i++) {\n        response.push(self.reportErrorInResponse(payload[i], err, result[i]));\n      }\n    } else {\n      response = self.reportErrorInResponse(payload, err, result);\n    }\n\n    if (self.options.verbose) {\n      self.options.logger.log(\n        \" <   \" +\n          JSON.stringify(response, null, 2)\n            .split(\"\\n\")\n            .join(\"\\n <   \")\n      );\n    }\n    callback(response.error ? err : null, response);\n  };\n\n  if (self.options.verbose) {\n    self.options.logger.log(\n      \"   > \" +\n        JSON.stringify(payload, null, 2)\n          .split(\"\\n\")\n          .join(\"\\n   > \")\n    );\n  }\n\n  if (self.options.asyncRequestProcessing) {\n    self.engine.sendAsync(payload, intermediary);\n  } else {\n    self._queueRequest(payload, intermediary);\n  }\n};\n\nProvider.prototype.close = function(callback) {\n  // This is a little gross reaching, but...\n  this.manager.state.stopMining();\n  this.manager.state.blockchain.close(callback);\n  this.engine.stop();\n};\n\nProvider.prototype._queueRequest = function(payload, intermediary) {\n  if (!this._requestQueue) {\n    this._requestQueue = [];\n  }\n\n  this._requestQueue.push({\n    payload: payload,\n    callback: intermediary\n  });\n\n  setImmediate(this._processRequestQueue);\n};\n\nProvider.prototype._processRequestQueue = function() {\n  const self = this;\n\n  if (self._requestInProgress) {\n    return;\n  }\n\n  self._requestInProgress = true;\n\n  let args = self._requestQueue.shift();\n\n  if (args) {\n    self.engine.sendAsync(args.payload, (err, result) => {\n      if (self._requestQueue.length > 0) {\n        setImmediate(self._processRequestQueue);\n      }\n      args.callback(err, result);\n      self._requestInProgress = false;\n    });\n  } else {\n    // still need to free the lock\n    self._requestInProgress = false;\n\n    if (self._requestQueue.length > 0) {\n      setImmediate(self._processRequestQueue);\n    }\n  }\n};\n\nProvider.prototype.cleanUpErrorObject = function(err, response) {\n  // Our response should already have an error field at this point, if it\n  // doesn't, this was likely intentional. If not, this is the wrong place to\n  // fix that problem.\n  if (!err || !response.error) {\n    return response;\n  }\n\n  let errorObject = {\n    error: {\n      data: {}\n    }\n  };\n\n  if (err.message) {\n    // clean up the error reporting done by the provider engine so the error message isn't lost in the stack trace noise\n    errorObject.error.message = err.message;\n    errorObject.error.data.stack = err.stack;\n    errorObject.error.data.name = err.name;\n  } else if (!response.error) {\n    errorObject.error = {\n      message: err.toString()\n    };\n  }\n\n  return _.merge(response, errorObject);\n};\n\n// helper list of RPC methods which execute code and respond with a transaction hash as their result\nlet transactionMethods = [\"eth_sendTransaction\", \"eth_sendRawTransaction\", \"personal_sendTransaction\"];\n\nProvider.prototype._isTransactionRequest = function(request) {\n  return transactionMethods.indexOf(request.method) !== -1;\n};\n\nProvider.prototype.reportErrorInResponse = function(request, err, response) {\n  const self = this;\n\n  if (!err) {\n    return response;\n  }\n\n  // TODO: for next major release: move reporting of tx hash on error to error\n  // field to prevent poorly-written clients which assume that the existence of\n  // the \"result\" field implies no errors from breaking.\n  if (self._isTransactionRequest(request)) {\n    if (err instanceof RuntimeError) {\n      // Make sure we always return the transaction hash on failed transactions so\n      // the caller can get their tx receipt. This breaks JSONRPC 2.0, but it's how\n      // we've always done it.\n      response.result = err.hashes[0];\n\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        delete response.error;\n      }\n    }\n  }\n\n  if (request.method === \"eth_call\") {\n    if (err instanceof RuntimeError) {\n      if (self.options.vmErrorsOnRPCResponse) {\n        if (!response.error.data) {\n          response.error.data = {};\n        }\n        response.error.data[err.hashes[0]] = err.results[err.hashes[0]];\n      } else {\n        response.result = err.results[err.hashes[0]].return || \"0x\";\n        delete response.error;\n      }\n    }\n  }\n\n  return self.cleanUpErrorObject(err, response);\n};\n\nmodule.exports = Provider;\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar scryptsy = require('scrypt.js');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction decipherBuffer(decipher, data) {\n  return Buffer.concat([decipher.update(data), decipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = crypto.randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(crypto.randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = crypto.randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || crypto.randomBytes(32);\n  var iv = opts.iv || crypto.randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = Buffer.concat([cipher.update(this.privKey), cipher.final()]);\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || crypto.randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.sha3(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.sha3(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = decipherBuffer(decipher, ciphertext, 'hex');\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = decipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.sha3(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","var to = require(\"./utils/to.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./utils/log\");\nvar Receipt = require(\"./utils/receipt\");\nvar VM = require(\"ethereumjs-vm\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Trie = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar async = require(\"async\");\nvar Heap = require(\"heap\");\nvar Database = require(\"./database\");\nvar EventEmitter = require(\"events\");\nvar _ = require(\"lodash\");\n\nfunction BlockchainDouble(options) {\n  var self = this;\n  EventEmitter.apply(self);\n\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  this.logger = options.logger || console;\n\n  this.data = new Database(options);\n\n  if (options.trie != null && options.db_path != null) {\n    throw new Error(\"Can't initialize a TestRPC with a db and a custom trie.\");\n  }\n\n  this.pending_transactions = [];\n\n  // updated periodically to keep up with the times\n  this.blockGasLimit = options.gasLimit;\n  this.defaultTransactionGasLimit = options.defaultTransactionGasLimit;\n  this.timeAdjustment = 0;\n}\n\nconst defaultOptions = {\n  gasLimit: \"0x6691b7\",\n  defaultTransactionGasLimit: \"0x15f90\",\n  time: null,\n  debug: false,\n  allowUnlimitedContractSize: false\n};\n\n// inheritence w/ prototype chaining\nBlockchainDouble.prototype = Object.create(EventEmitter.prototype);\nBlockchainDouble.prototype.constructor = BlockchainDouble;\n\nBlockchainDouble.prototype._applyDefaultOptions = function(options) {\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nBlockchainDouble.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.data.initialize(function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      var options = self.options;\n\n      var root = null;\n\n      if (block) {\n        root = block.header.stateRoot;\n      }\n\n      // I haven't yet found a good way to do this. Getting the trie from the\n      // forked blockchain without going through the other setup is a little gross.\n      self.stateTrie = self.createStateTrie(self.data.trie_db, root);\n\n      self.vm =\n        options.vm ||\n        new VM({\n          state: self.stateTrie,\n          blockchain: {\n            // EthereumJS VM needs a blockchain object in order to get block information.\n            // When calling getBlock() it will pass a number that's of a Buffer type.\n            // Unfortunately, it uses a 64-character buffer (when converted to hex) to\n            // represent block numbers as well as block hashes. Since it's very unlikely\n            // any block number will get higher than the maximum safe Javascript integer,\n            // we can convert this buffer to a number ahead of time before calling our\n            // own getBlock(). If the conversion succeeds, we have a block number.\n            // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)\n            getBlock: function(number, done) {\n              try {\n                number = to.number(number);\n              } catch (e) {\n                // Do nothing; must be a block hash.\n              }\n\n              self.getBlock(number, done);\n            }\n          },\n          enableHomestead: true,\n          activatePrecompiles: true,\n          allowUnlimitedContractSize: options.allowUnlimitedContractSize\n        });\n\n      if (options.debug === true) {\n        // log executed opcodes, including args as hex\n        self.vm.on(\"step\", function(info) {\n          var name = info.opcode.name;\n          var argsNum = info.opcode.in;\n          if (argsNum) {\n            var args = info.stack\n              .slice(-argsNum)\n              .map((arg) => to.hex(arg))\n              .join(\" \");\n\n            self.logger.log(`${name} ${args}`);\n          } else {\n            self.logger.log(name);\n          }\n        });\n      }\n\n      if (options.time) {\n        self.setTime(options.time);\n      }\n\n      // If we already have a block, then that means there's an existing chain.\n      // Don't create a genesis block.\n      if (block) {\n        self.emit(\"block\", block);\n        return callback();\n      }\n\n      self.createGenesisBlock(function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        accounts = accounts || [];\n\n        async.eachSeries(\n          accounts,\n          function(accountData, finished) {\n            self.putAccount(accountData.account, accountData.address, finished);\n          },\n          function(err) {\n            if (err) {\n              return callback(err);\n            }\n\n            // Create first block\n            self.putBlock(block, [], [], callback);\n          }\n        );\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.createStateTrie = function(db, root) {\n  return new Trie(this.data.trie_db, root);\n};\n\n// Overrideable so other implementations (forking) can edit it.\nBlockchainDouble.prototype.createGenesisBlock = function(callback) {\n  this.createBlock(callback);\n};\n\nBlockchainDouble.prototype.latestBlock = function(callback) {\n  this.data.blocks.last(function(err, last) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, last);\n  });\n};\n\n// number accepts number (integer, hex) or tag (e.g., \"latest\")\nBlockchainDouble.prototype.getEffectiveBlockNumber = function(number, callback) {\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number\n  if (number.indexOf(\"0x\") >= 0) {\n    return callback(null, to.number(number));\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.getHeight(callback);\n    } else if (number === \"earliest\") {\n      return callback(null, 0);\n    }\n  }\n};\n\n// number accepts number (integer, hex), tag (e.g., \"latest\") or block hash\n// This function is used by ethereumjs-vm\nBlockchainDouble.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  if (typeof number !== \"string\") {\n    number = to.hex(number);\n  }\n\n  // If we have a hex number or a block hash\n  if (number.indexOf(\"0x\") >= 0) {\n    var hash = number;\n\n    // block hash\n    if (hash.length > 40) {\n      this.data.blockHashes.get(to.hex(hash), function(err, blockIndex) {\n        if (err) {\n          return callback(err);\n        }\n        return self.data.blocks.get(blockIndex, callback);\n      });\n    } else {\n      // Block number\n      return this.data.blocks.get(to.number(hash), callback);\n    }\n  } else {\n    if (number === \"latest\" || number === \"pending\") {\n      return this.latestBlock(callback);\n    } else if (number === \"earliest\") {\n      return this.data.blocks.first(callback);\n    }\n  }\n};\n\nBlockchainDouble.prototype.putBlock = function(block, logs, receipts, callback) {\n  var self = this;\n\n  // Lock in the state root for this block.\n  block.header.stateRoot = this.stateTrie.root;\n\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var requests = [\n      self.data.blocks.push.bind(self.data.blocks, block),\n      self.data.blockLogs.push.bind(self.data.blockLogs, logs),\n      self.data.blockHashes.set.bind(self.data.blockHashes, to.hex(block.hash()), length)\n    ];\n\n    block.transactions.forEach(function(tx, index) {\n      var txHash = to.hex(tx.hash());\n      requests.push(\n        self.data.transactions.set.bind(self.data.transactions, txHash, tx),\n        self.data.transactionReceipts.set.bind(self.data.transactionReceipts, txHash, receipts[index])\n      );\n    });\n\n    async.parallel(requests, (err, result) => {\n      if (!err) {\n        self.emit(\"block\", block);\n      }\n      callback(err, result);\n    });\n  });\n};\n\nBlockchainDouble.prototype.popBlock = function(callback) {\n  var self = this;\n\n  this.data.blocks.last(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    if (block == null) {\n      return callback(null, null);\n    }\n\n    var requests = [];\n    var blockHash = to.hex(block.hash());\n\n    block.transactions.forEach(function(tx) {\n      var txHash = to.hex(tx.hash());\n\n      requests.push(\n        self.data.transactions.del.bind(self.data.transactions, txHash),\n        self.data.transactionReceipts.del.bind(self.data.transactionReceipts, txHash)\n      );\n    });\n\n    requests.push(\n      self.data.blockLogs.pop.bind(self.data.blockLogs),\n      self.data.blockHashes.del.bind(self.data.blockHashes, blockHash),\n      self.data.blocks.pop.bind(self.data.blocks) // Do this one last in case anything relies on it.\n    );\n\n    async.series(requests, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Set the root to the last available, which will \"roll back\" to the previous\n      // moment in time. Note that all the old data is still in the db, but it's now just junk data.\n      self.data.blocks.last(function(err, newLastBlock) {\n        if (err) {\n          return callback(err);\n        }\n        self.stateTrie.root = newLastBlock.header.stateRoot;\n        // Remember: Return block we popped off.\n        callback(null, block);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.clearPendingTransactions = function() {\n  this.pending_transactions = [];\n};\n\nBlockchainDouble.prototype.putAccount = function(account, address, callback) {\n  var self = this;\n\n  address = utils.toBuffer(address);\n\n  this.vm.stateManager.putAccount(address, account, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.vm.stateManager.cache.flush(callback);\n  });\n};\n\n/**\n * createBlock\n *\n * Create a new block, where the parent's block is either the latest block\n * on the chain or the parent block passed in.\n *\n * @param  {Block}   parent   The block meant to be the parent block (optional)\n * @param  {Function} callback Callback function called after block is created\n * @return Block              The block created.\n */\nBlockchainDouble.prototype.createBlock = function(parent, callback) {\n  var self = this;\n\n  if (typeof parent === \"function\") {\n    callback = parent;\n    parent = null;\n  }\n\n  var block = new Block();\n\n  function getParent(callback) {\n    if (parent) {\n      return callback(null, parent);\n    } else {\n      self.latestBlock(callback);\n    }\n  }\n\n  getParent(function(err, parent) {\n    if (err) {\n      return callback(err);\n    }\n\n    var parentNumber = parent != null ? to.number(parent.header.number) : -1;\n\n    block.header.gasLimit = self.blockGasLimit;\n\n    // Ensure we have the right block number for the VM.\n    block.header.number = to.hex(parentNumber + 1);\n\n    // Set the timestamp before processing txs\n    block.header.timestamp = to.hex(self.currentTime());\n\n    if (parent != null) {\n      block.header.parentHash = to.hex(parent.hash());\n    }\n\n    callback(null, block);\n  });\n};\n\nBlockchainDouble.prototype.getQueuedNonce = function(address, callback) {\n  var nonce = null;\n\n  this.pending_transactions.forEach(function(tx) {\n    if (!tx.from.equals(to.buffer(address))) {\n      return;\n    }\n\n    var pendingNonce = to.number(tx.nonce) || 0;\n    // If this is the first queued nonce for this address we found,\n    // or it's higher than the previous highest, note it.\n    if (nonce === null || pendingNonce > nonce) {\n      nonce = pendingNonce;\n    }\n  });\n\n  // If we found a queued transaction nonce, return one higher\n  // than the highest we found\n  if (nonce != null) {\n    return callback(null, Buffer.from([nonce + 1]));\n  }\n\n  this.stateTrie.get(address, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n\n    var account = new Account(val);\n    // nonces are initiallized as an empty buffer, which isn't what we want.\n    callback(null, account.nonce.length === 0 ? Buffer.from([0]) : account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.queueTransaction = function(tx) {\n  this.pending_transactions.push(tx);\n};\n\nBlockchainDouble.prototype.sortByPriceAndNonce = function() {\n  // Sorts transactions like I believe geth does.\n  // See the description of 'SortByPriceAndNonce' at\n  // https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/types/transaction.go\n  var self = this;\n  var sortedByNonce = {};\n\n  self.pending_transactions.forEach((tx) => {\n    const from = tx.from.toString(\"hex\");\n    const arr = sortedByNonce[from];\n    if (arr) {\n      arr.push(tx);\n    } else {\n      sortedByNonce[from] = [tx];\n    }\n  });\n\n  var priceSort = function(a, b) {\n    return parseInt(to.hex(b.gasPrice), 16) - parseInt(to.hex(a.gasPrice), 16);\n  };\n  var nonceSort = function(a, b) {\n    return parseInt(to.hex(a.nonce), 16) - parseInt(to.hex(b.nonce), 16);\n  };\n\n  // Now sort each address by nonce\n  Object.keys(sortedByNonce).forEach((address) => {\n    sortedByNonce[address].sort(nonceSort);\n  });\n\n  // Initialise a heap, sorted by price, for the head transaction from each account.\n  var heap = new Heap(priceSort);\n  Object.keys(sortedByNonce).forEach((address) => {\n    heap.push(sortedByNonce[address].shift());\n  });\n\n  // Now reorder our transactions. Compare the next transactions from each account, and choose\n  // the one with the highest gas price.\n  const sortedTransactions = [];\n  while (heap.size() > 0) {\n    const best = heap.pop();\n    let address = best.from.toString(\"hex\");\n    if (sortedByNonce[address].length > 0) {\n      // Push on the next transaction from this account\n      heap.push(sortedByNonce[address].shift());\n    }\n    sortedTransactions.push(best);\n  }\n  self.pending_transactions = sortedTransactions;\n};\n\nBlockchainDouble.prototype.processCall = function(tx, blockNumber, callback) {\n  var self = this;\n  var startingStateRoot;\n\n  var cleanUpAndReturn = function(err, result, changeRoot) {\n    self.vm.stateManager.revert(function(e) {\n      // For defaultBlock, undo state root changes\n      if (changeRoot) {\n        self.stateTrie.root = startingStateRoot;\n      }\n      callback(err || e, result);\n    });\n  };\n\n  var runCall = function(tx, changeRoot, err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // For defaultBlock, use that block's root\n    if (changeRoot) {\n      startingStateRoot = self.stateTrie.root;\n      self.stateTrie.root = block.header.stateRoot;\n    }\n\n    // create a fake block with this fake transaction\n    self.createBlock(block, function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n      block.transactions.push(tx);\n\n      // We checkpoint here for speed. We want all state trie reads/writes to happen in memory,\n      // and the final output be flushed to the database at the end of transaction processing.\n      self.vm.stateManager.checkpoint();\n\n      var runArgs = {\n        tx: tx,\n        block: block,\n        skipBalance: true,\n        skipNonce: true\n      };\n\n      self.vm.runTx(runArgs, function(vmerr, result) {\n        // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n        if (vmerr && vmerr instanceof Error === false) {\n          vmerr = new Error(\"VM error: \" + vmerr);\n        }\n\n        // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n        if (vmerr) {\n          return cleanUpAndReturn(vmerr);\n        }\n\n        // If no error, check for a runtime error. This can return null if no runtime error.\n        vmerr = RuntimeError.fromResults([tx], { results: [result] });\n\n        cleanUpAndReturn(vmerr, result, changeRoot);\n      });\n    });\n  };\n\n  // Delegate block selection\n  blockNumber === \"latest\"\n    ? self.latestBlock(runCall.bind(null, tx, false))\n    : self.getBlock(blockNumber, runCall.bind(null, tx, true));\n};\n\n/**\n * processBlock\n *\n * Process the passed in block and included transactions\n *\n * @param  {Block} block       block to process\n * @param  {Boolean} commit    Whether or not changes should be committed to the state\n * trie and the block appended to the end of the chain.\n * @param  {Function} callback Callback function when transaction processing is completed.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processBlock = function(block, commit, callback) {\n  var self = this;\n\n  if (typeof commit === \"function\") {\n    callback = commit;\n    commit = true;\n  }\n\n  // We checkpoint here for speed. We want all state trie reads/writes to happen in memory,\n  // and the final output be flushed to the database at the end of transaction processing.\n  self.vm.stateManager.checkpoint();\n\n  var cleanup = function(err) {\n    self.vm.stateManager.revert(function(e) {\n      callback(err || e);\n    });\n  };\n\n  self.vm.runBlock(\n    {\n      block: block,\n      generate: true\n    },\n    function(vmerr, results) {\n      // This is a check that has been in there for awhile. I'm unsure if it's required, but it can't hurt.\n      if (vmerr && vmerr instanceof Error === false) {\n        vmerr = new Error(\"VM error: \" + vmerr);\n      }\n\n      // If we're given an error back directly, it's worse than a runtime error. Expose it and get out.\n      if (vmerr) {\n        return cleanup(vmerr);\n      }\n\n      // If no error, check for a runtime error. This can return null if no runtime error.\n      vmerr = RuntimeError.fromResults(block.transactions, results);\n\n      // Note, even if we have an error, some transactions may still have succeeded.\n      // Process their logs if so, returning the error at the end.\n\n      var logs = [];\n      var receipts = [];\n\n      var totalBlockGasUsage = 0;\n\n      results.results.forEach(function(result) {\n        totalBlockGasUsage += to.number(result.gasUsed);\n      });\n\n      block.header.gasUsed = utils.toBuffer(to.hex(totalBlockGasUsage));\n\n      for (var v = 0; v < results.receipts.length; v++) {\n        var result = results.results[v];\n        var receipt = results.receipts[v];\n        var tx = block.transactions[v];\n        var txHash = tx.hash();\n        var txLogs = [];\n\n        // Only process the transaction's logs if it didn't error.\n        if (result.vm.exception === 1) {\n          for (var i = 0; i < receipt.logs.length; i++) {\n            var receiptLog = receipt.logs[i];\n            var address = to.hex(receiptLog[0]);\n            var topics = [];\n\n            for (var j = 0; j < receiptLog[1].length; j++) {\n              topics.push(to.hex(receiptLog[1][j]));\n            }\n\n            var data = to.hex(receiptLog[2]);\n\n            var log = new Log({\n              logIndex: to.hex(i),\n              transactionIndex: to.hex(v),\n              transactionHash: txHash,\n              block: block,\n              address: address,\n              data: data,\n              topics: topics,\n              type: \"mined\"\n            });\n\n            logs.push(log);\n            txLogs.push(log);\n          }\n        }\n\n        let rcpt = new Receipt(\n          tx,\n          block,\n          txLogs,\n          result.gasUsed.toArrayLike(Buffer),\n          receipt.gasUsed,\n          result.createdAddress,\n          receipt.status,\n          to.hex(result.bloom.bitvector)\n        );\n        receipts.push(rcpt);\n      }\n\n      function commmitIfNeeded(cb) {\n        if (commit === true) {\n          self.vm.stateManager.commit(function(e) {\n            if (e) {\n              return cleanup(e);\n            }\n\n            // Put that block on the end the chain\n            self.putBlock(block, logs, receipts, cb);\n          });\n        } else {\n          self.vm.stateManager.revert(cb);\n        }\n      }\n\n      commmitIfNeeded(function(e) {\n        if (e) {\n          return callback(e);\n        }\n        // Note we return the vm err here too, if it exists.\n        callback(vmerr, block.transactions, results);\n      });\n    }\n  );\n};\n\n/**\n * processNextBlock\n *\n * Process the next block like a normal blockchain, pulling from the list of\n * pending transactions.\n *\n * @param  {number} timestamp at which the block is mined\n * @param  {Function} callback Callback when transaction processing is finished.\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processNextBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n\n  self.sortByPriceAndNonce();\n\n  // Grab only the transactions that can fit within the block\n  var currentTransactions = [];\n  var totalGasLimit = 0;\n  var maxGasLimit = to.number(self.blockGasLimit);\n\n  while (self.pending_transactions.length > 0) {\n    var tx = self.pending_transactions[0];\n    var gasLimit = to.number(tx.gasLimit);\n\n    if (totalGasLimit + gasLimit <= maxGasLimit) {\n      totalGasLimit += gasLimit;\n      self.pending_transactions.shift();\n      currentTransactions.push(tx);\n    } else {\n      // Next one won't fit. Break.\n      break;\n    }\n  }\n\n  // Remember, we ensured transactions had a valid gas limit when they were queued (in the state manager).\n  // If we run into a case where we can't process any because one is higher than the gas limit,\n  // then it's a serious issue. This should never happen, but let's check anyway.\n  if (currentTransactions.length === 0 && self.pending_transactions.length > 0) {\n    // Error like geth.\n    var error = \"Unexpected error condition: next transaction exceeds block gas limit\";\n    return callback(error);\n  }\n\n  // Create a new block meant to be the end of the chain\n  this.createBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    // Overwrite block timestamp\n    if (timestamp) {\n      self.data.blocks.last(function(err, last) {\n        if (err) {\n          return callback(err);\n        }\n        if (last && to.number(last.header.timestamp) > timestamp) {\n          self.logger.log(\n            \"Waring: Setting the block timestamp (\" + timestamp + \") that is earlier than the parent block one.\"\n          );\n        }\n      });\n      block.header.timestamp = to.hex(timestamp);\n      self.setTime(new Date(timestamp * 1000));\n    }\n    // Add transactions to the block.\n    Array.prototype.push.apply(block.transactions, currentTransactions);\n\n    // Process the block, committing the block to the chain\n    self.processBlock(block, true, callback);\n  });\n};\n\n/**\n * processTransactionTrace\n *\n * Run a previously-run transaction in the same state in which it occurred at the time it was run.\n * This will return the vm-level trace output for debugging purposes.\n *\n * Strategy:\n *\n *  1. Find block where transaction occurred\n *  2. Set state root of that block\n *  3. Rerun every transaction in that block prior to and including the requested transaction\n *  4. Reset state root back to original\n *  5. Send trace results back.\n *\n * @param  {[type]}   tx       [description]\n * @param  {Function} callback [description]\n * @return [type]              [description]\n */\nBlockchainDouble.prototype.processTransactionTrace = function(hash, params, callback) {\n  var self = this;\n  var targetHash = to.hex(hash);\n  var txHashCurrentlyProcessing = \"\";\n  var txCurrentlyProcessing = null;\n\n  var storageStack = {\n    currentDepth: -1,\n    stack: []\n  };\n\n  var returnVal = {\n    gas: 0,\n    returnValue: \"\",\n    structLogs: []\n  };\n\n  function stepListener(event, next) {\n    // See these docs:\n    // https://github.com/ethereum/go-ethereum/wiki/Management-APIs\n\n    var gasLeft = to.number(event.gasLeft);\n    var totalGasUsedAfterThisStep = to.number(txCurrentlyProcessing.gasLimit) - gasLeft;\n    var gasUsedThisStep = totalGasUsedAfterThisStep - returnVal.gas;\n    returnVal.gas += gasUsedThisStep;\n\n    var isMemoryEnabled = !params.disableMemory;\n    var memory = null;\n    if (isMemoryEnabled) {\n      // Get memory and break it up into 32-byte words.\n      // Note we may possibly have to pad the final word.\n      memory = Buffer.from(event.memory).toString(\"hex\");\n      memory = memory.match(/.{1,64}/g) || [];\n\n      if (memory.length > 0) {\n        var lastItem = memory[memory.length - 1];\n        if (lastItem.length < 64) {\n          memory[memory.length - 1] = lastItem + new Array(64 - lastItem.length + 1).join(\"0\");\n        }\n      }\n    }\n\n    var stack;\n    if (params.disableStack) {\n      stack = null;\n    } else {\n      stack = event.stack.map((item) => {\n        return to.rpcDataHexString(item, 64).replace(\"0x\", \"\"); // non-0x prefixed.\n      });\n    }\n\n    var structLog = {\n      depth: event.depth,\n      error: \"\",\n      gas: gasLeft,\n      gasCost: gasUsedThisStep,\n      memory,\n      op: event.opcode.name,\n      pc: event.pc,\n      stack,\n      storage: null\n    };\n\n    if (params.disableStorage) {\n      returnVal.structLogs.push(structLog);\n      next();\n    } else {\n      structLog = self.processStorageTrace(structLog, storageStack, event, function(err, structLog) {\n        if (err) {\n          return next(err);\n        }\n        returnVal.structLogs.push(structLog);\n        next();\n      });\n    }\n  }\n\n  function beforeTxListener(tx) {\n    txCurrentlyProcessing = tx;\n    txHashCurrentlyProcessing = to.hex(tx.hash());\n    if (txHashCurrentlyProcessing === targetHash) {\n      self.vm.on(\"step\", stepListener);\n    }\n  }\n\n  // afterTxListener cleans up everything.\n  function afterTxListener() {\n    if (txHashCurrentlyProcessing === targetHash) {\n      self.vm.removeListener(\"step\", stepListener);\n      self.vm.removeListener(\"beforeTx\", beforeTxListener);\n      self.vm.removeListener(\"afterTx\", afterTxListener);\n    }\n  }\n\n  // Listen to beforeTx and afterTx so we know when our target transaction\n  // is processing. These events will add the vent listener for getting the trace data.\n  self.vm.on(\"beforeTx\", beforeTxListener);\n  self.vm.on(\"afterTx\", afterTxListener);\n\n  // #1 - get block via transaction receipt\n  this.getTransactionReceipt(targetHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!receipt) {\n      return callback(new Error(\"Unknown transaction \" + targetHash));\n    }\n\n    var targetBlock = receipt.block;\n\n    // Get the parent of the target block\n    self.getBlock(targetBlock.header.parentHash, function(err, parent) {\n      if (err) {\n        return callback(err);\n      }\n\n      var startingStateRoot = self.stateTrie.root;\n\n      // #2 - Set state root of original block\n      self.stateTrie.root = parent.header.stateRoot;\n\n      // Prepare the \"next\" block with necessary transactions\n      self.createBlock(parent, function(err, block) {\n        if (err) {\n          return callback(err);\n        }\n\n        for (var i = 0; i < targetBlock.transactions.length; i++) {\n          var tx = targetBlock.transactions[i];\n          block.transactions.push(tx);\n\n          // After including the target transaction, that's all we need to do.\n          if (to.hex(tx.hash()) === targetHash) {\n            break;\n          }\n        }\n\n        // #3 - Process the block without committing the data.\n        self.processBlock(block, false, function(err) {\n          // Ignore runtime errors, or else erroneous transactions can't be traced.\n          if (err && err.message.indexOf(\"VM Exception\") === 0) {\n            err = null;\n          }\n\n          // #4 - reset the state root.\n          self.stateTrie.root = startingStateRoot;\n\n          // Just to be safe\n          self.vm.removeListener(\"beforeTx\", beforeTxListener);\n          self.vm.removeListener(\"afterTx\", afterTxListener);\n          self.vm.removeListener(\"step\", stepListener);\n\n          // #5 - send state results back\n          callback(err, returnVal);\n        });\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.processStorageTrace = function(structLog, storageStack, event, callback) {\n  var self = this;\n  var name = event.opcode.name;\n\n  var argsNum = event.opcode.in;\n  var args = event.stack.slice(-argsNum).map((arg) => to.hex(arg));\n\n  if (storageStack.currentDepth > event.depth) {\n    storageStack.stack.pop();\n  }\n  if (storageStack.currentDepth < event.depth) {\n    storageStack.stack.push({});\n  }\n\n  storageStack.currentDepth = event.depth;\n\n  var key;\n  var value;\n  switch (name) {\n    case \"SSTORE\":\n      key = to.rpcDataHexString(args[1], 64).replace(\"0x\", \"\");\n      value = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n\n      callback(null, structLog);\n      // assign after callback because this storage change actually takes\n      // effect _after_ this opcode executes\n      storageStack.stack[storageStack.currentDepth][key] = value;\n      break;\n    case \"SLOAD\":\n      // this one's more fun, we need to get the value the contract is loading from current storage\n      key = to.rpcDataHexString(args[0], 64).replace(\"0x\", \"\");\n\n      self.vm.stateManager.getContractStorage(event.address, \"0x\" + key, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        value = to.rpcDataHexString(result, 64).replace(\"0x\", \"\");\n        storageStack.stack[storageStack.currentDepth][key] = value;\n        // use Object.assign to prevent future steps from overwriting this step's storage values\n        structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n        callback(null, structLog);\n      });\n      break;\n    default:\n      // use Object.assign to prevent future steps from overwriting this step's storage values\n      structLog.storage = Object.assign({}, storageStack.stack[storageStack.currentDepth]);\n      callback(null, structLog);\n  }\n};\n\nBlockchainDouble.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      // Finally, put the stateRoot back for good\n      trie.root = currentStateRoot;\n\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      callback(null, account);\n    });\n  });\n};\n\nBlockchainDouble.prototype.getNonce = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, account.nonce);\n  });\n};\n\nBlockchainDouble.prototype.getBalance = function(address, number, callback) {\n  this.getAccount(address, number, function(err, account) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, account.balance);\n  });\n};\n\n// Note! Storage values are returned RLP encoded!\nBlockchainDouble.prototype.getStorage = function(address, position, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      trie.root = account.stateRoot;\n\n      trie.get(utils.setLengthLeft(utils.toBuffer(position), 32), function(err, value) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err != null) {\n          return callback(err);\n        }\n\n        callback(null, value);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  this.getBlock(number, function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n\n    var trie = self.stateTrie;\n\n    // Manipulate the state root in place to maintain checkpoints\n    var currentStateRoot = trie.root;\n    self.stateTrie.root = block.header.stateRoot;\n\n    trie.get(utils.toBuffer(address), function(err, data) {\n      if (err != null) {\n        // Put the stateRoot back if there's an error\n        trie.root = currentStateRoot;\n        return callback(err);\n      }\n\n      var account = new Account(data);\n\n      account.getCode(trie, function(err, code) {\n        // Finally, put the stateRoot back for good\n        trie.root = currentStateRoot;\n\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, code);\n      });\n    });\n  });\n};\n\nBlockchainDouble.prototype.getTransaction = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactions.get(hash, function(err, tx) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, tx);\n  });\n};\n\nBlockchainDouble.prototype.getTransactionReceipt = function(hash, callback) {\n  hash = to.hex(hash);\n\n  this.data.transactionReceipts.get(hash, function(err, receipt) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(err, receipt);\n  });\n};\n\nBlockchainDouble.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    self.data.blockLogs.get(effective, callback);\n  });\n};\n\nBlockchainDouble.prototype.getHeight = function(callback) {\n  this.data.blocks.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, length - 1);\n  });\n};\n\nBlockchainDouble.prototype.currentTime = function() {\n  return ((new Date().getTime() / 1000) | 0) + this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.increaseTime = function(seconds) {\n  if (seconds < 0) {\n    seconds = 0;\n  }\n  this.timeAdjustment += seconds;\n  return this.timeAdjustment;\n};\n\nBlockchainDouble.prototype.setTime = function(date) {\n  var now = (new Date().getTime() / 1000) | 0;\n  var start = (date.getTime() / 1000) | 0;\n  this.timeAdjustment = start - now;\n};\n\nBlockchainDouble.prototype.close = function(callback) {\n  this.data.close(callback);\n};\n\nmodule.exports = BlockchainDouble;\n","module.exports = require(\"merkle-patricia-tree\");","module.exports = require(\"level-sublevel\");","// var to = require(\"../utils/to\");\nvar Transaction = require(\"../utils/transaction\");\n\nconst decode = function(json, done) {\n  const options = {\n    hash: json.hash,\n    nonce: json.nonce,\n    value: json.value,\n    to: json.to,\n    from: json.from,\n    gasLimit: json.gas || json.gasLimit,\n    gasPrice: json.gasPrice,\n    data: json.data,\n    v: json.v,\n    r: json.r,\n    s: json.s\n  };\n\n  // databases generated before ganache-core@2.3.2 didn't have a `_type` and\n  // and were always fake signed. So if _type is undefined it is \"fake\" (even\n  // if we have a valid signature that can generate the tx's `from`).\n  const type = json._type === undefined ? Transaction.types.fake : json._type;\n  const tx = Transaction.fromJSON(options, type);\n\n  // Commenting this out because we don't want to throw if the json.hash we\n  // put in is different that the tx.hash() calculation we now have. There\n  // may have been bug fixes to the way transactions are hashed in future\n  // versions of ganache-core, but we still want tobe able to read in\n  // transactions from previously saved databases!\n  // if (to.hex(tx.hash()) !== json.hash) {\n  //   const e = new Error(\n  //     \"DB consistency check: Decoded transaction hash \" +\n  //       \"didn't match encoded hash. Expected: \" +\n  //       json.hash +\n  //       \"; actual: \" +\n  //       to.hex(tx.hash())\n  //   );\n  //   return done(e);\n  // }\n\n  done(null, tx);\n};\n\nconst encode = function(tx, done) {\n  const encoded = tx.encode();\n  done(null, encoded);\n};\n\nmodule.exports = {\n  encode,\n  decode\n};\n","var inherits = require(\"util\").inherits;\n\n// raised when the transaction is rejected prior to running it in the EVM.\nfunction TXRejectedError(message) {\n  // Why not just Error.apply(this, [message])? See\n  // https://gist.github.com/justmoon/15511f92e5216fa2624b#anti-patterns\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n}\n\ninherits(TXRejectedError, Error);\n\nmodule.exports = TXRejectedError;\n","var to = require(\"./to\");\n\nmodule.exports = {\n  toJSON: function(block, includeFullTransactions) {\n    return {\n      number: to.rpcQuantityHexString(block.header.number),\n      hash: to.hex(block.hash()),\n      parentHash: to.hex(block.header.parentHash), // common.hash\n      mixHash: to.hex(block.header.mixHash),\n      nonce: to.rpcDataHexString(to.hex(block.header.nonce), 16),\n      sha3Uncles: to.hex(block.header.uncleHash),\n      logsBloom: to.hex(block.header.bloom),\n      transactionsRoot: to.hex(block.header.transactionsTrie),\n      stateRoot: to.hex(block.header.stateRoot),\n      receiptsRoot: to.hex(block.header.receiptTrie),\n      miner: to.hex(block.header.coinbase),\n      difficulty: to.rpcQuantityHexString(block.header.difficulty),\n      totalDifficulty: to.rpcQuantityHexString(block.header.difficulty), // TODO: Figure out what to do here.\n      extraData: to.rpcDataHexString(block.header.extraData),\n      size: to.hex(1000), // TODO: Do something better here\n      gasLimit: to.rpcQuantityHexString(block.header.gasLimit),\n      gasUsed: to.rpcQuantityHexString(block.header.gasUsed),\n      timestamp: to.rpcQuantityHexString(block.header.timestamp),\n      transactions: block.transactions.map(function(tx) {\n        if (includeFullTransactions) {\n          return tx.toJsonRpc(block);\n        } else {\n          return to.hex(tx.hash());\n        }\n      }),\n      uncles: [] // block.uncleHeaders.map(function(uncleHash) {return to.hex(uncleHash)})\n    };\n  }\n};\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nconst Provider = require(\"./lib/provider\");\nconst Server = require(\"./lib/server\");\n\n// This interface exists so as not to cause breaking changes.\nmodule.exports = {\n  server: function(options) {\n    return Server.create(options);\n  },\n  provider: function(options) {\n    return new Provider(options);\n  },\n  _webpacked: true\n};\n","module.exports = require(\"web3-provider-engine\");","module.exports = require(\"web3-provider-engine/subproviders/subscriptions\");","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(RequestFunnel, Subprovider);\n\nmodule.exports = RequestFunnel;\n\n// See if any payloads for the specified methods are marked as external.\n// If they are external, and match the method list, process them one at\n// a time.\nfunction RequestFunnel() {\n  // We use an object here for O(1) lookups (speed).\n  this.methods = {\n    eth_call: true,\n    eth_getStorageAt: true,\n    eth_sendTransaction: true,\n    eth_sendRawTransaction: true,\n\n    // Ensure block filter and filter changes are process one at a time\n    // as well so filter requests that come in after a transaction get\n    // processed once that transaction has finished processing.\n    eth_newBlockFilter: true,\n    eth_getFilterChanges: true,\n    eth_getFilterLogs: true\n  };\n  this.queue = [];\n  this.isWorking = false;\n}\n\nRequestFunnel.prototype.handleRequest = function(payload, next, end) {\n  if (payload.external !== true || this.methods[payload.method] !== true) {\n    return next();\n  }\n\n  this.queue.push([payload, next]);\n\n  if (this.isWorking === false) {\n    this.processNext();\n  }\n};\n\nRequestFunnel.prototype.processNext = function() {\n  var self = this;\n\n  if (this.queue.length === 0) {\n    this.isWorking = false;\n    return;\n  }\n\n  this.isWorking = true;\n\n  var item = this.queue.shift();\n  var next = item[1];\n\n  next(function(error, request, cb) {\n    if (error) {\n      return cb(error);\n    }\n    cb();\n    self.processNext();\n  });\n};\n","// It's unforutnate we have to have this subprovider, but it's because\n// we instamine, and web3 isn't written in a way that supports instamining\n// (i.e., it sets up the filter after the transaction has been processed).\n// This block filter will ensure that each block filter will always see\n// the change from the last block to the current block.\n//\n// Note: An added benefit of this is that it shaves off a signifcant\n// amount of time from tests that use web3 and block filters.\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\nvar async = require(\"async\");\nvar to = require(\"../utils/to\");\n\ninherits(DelayedBlockFilter, Subprovider);\n\nmodule.exports = DelayedBlockFilter;\n\nfunction DelayedBlockFilter() {\n  this.watching = {};\n}\n\nDelayedBlockFilter.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method === \"eth_newBlockFilter\") {\n    return this.handleNewBlockFilter(payload, next, end);\n  }\n  if (payload.method === \"eth_getFilterChanges\") {\n    return this.handleGetFilterChanges(payload, next, end);\n  }\n\n  next();\n};\n\nDelayedBlockFilter.prototype.handleNewBlockFilter = function(payload, next, end) {\n  var self = this;\n\n  // Let this filter process and add it to our watch list.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n    self.watching[result] = true;\n    cb();\n  });\n};\n\nDelayedBlockFilter.prototype.handleGetFilterChanges = function(payload, next, end) {\n  var self = this;\n  var filterId = payload.params[0];\n\n  if (!this.watching[filterId]) {\n    return next();\n  }\n\n  // Get the changes, and then alter the result.\n  next(function(err, result, cb) {\n    if (err) {\n      return cb();\n    }\n\n    var currentBlockHash;\n    var previousBlockHash;\n    var blockNumber;\n\n    async.series(\n      [\n        function(c) {\n          // If we have a result, use it.\n          if (result.length !== 0) {\n            currentBlockHash = result[0];\n            c();\n          } else {\n            // Otherwise, get the current block number.\n            self.emitPayload(\n              {\n                method: \"eth_blockNumber\"\n              },\n              function(err, res) {\n                if (err) {\n                  return c(err);\n                }\n                blockNumber = to.number(res.result);\n                c();\n              }\n            );\n          }\n        },\n        function(c) {\n          // If we got a block number above, meaning, we didn't get a block hash,\n          // skip this step.\n          if (blockNumber) {\n            return c();\n          }\n\n          // If not skipped, then we got a block hash, and we need to get a block number from it.\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByHash\",\n              params: [currentBlockHash, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              blockNumber = to.number(res.result.number);\n              c();\n            }\n          );\n        },\n        function(c) {\n          // If we're at block 0, return no changes. See final function below.\n          blockNumber = to.number(blockNumber);\n          if (blockNumber === 0) {\n            previousBlockHash = undefined;\n            return c();\n          }\n\n          // If at this point, we do have a block number, so let's subtract one\n          // from it and get the block hash of the block before it.\n          blockNumber = blockNumber - 1;\n          self.emitPayload(\n            {\n              method: \"eth_getBlockByNumber\",\n              params: [blockNumber, false]\n            },\n            function(err, res) {\n              if (err) {\n                return c(err);\n              }\n              previousBlockHash = res.result.hash;\n              c();\n            }\n          );\n        }\n      ],\n      function(err) {\n        if (err) {\n          // Unfortunately the subprovider code doesn't let us return an error\n          // through the callback cb(). So we'll just ignore it.... (famous last words).\n        }\n\n        // If we got the previous block, use it. Otherwise do nothing.\n        // Then stop watching because we only want on getFilterChanges to react this way.\n        if (previousBlockHash) {\n          result[0] = previousBlockHash;\n        }\n\n        delete self.watching[filterId];\n        cb();\n      }\n    );\n  });\n};\n","var Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\nvar inherits = require(\"util\").inherits;\n\ninherits(GethDefaults, Subprovider);\n\nmodule.exports = GethDefaults;\n\nfunction GethDefaults() {}\n\n// Massage eth_estimateGas requests, setting default data (e.g., from) if\n// not specified. This is here specifically to make the testrpc\n// react like Geth.\nGethDefaults.prototype.handleRequest = function(payload, next, end) {\n  if (payload.method !== \"eth_estimateGas\" && payload.method !== \"eth_call\") {\n    return next();\n  }\n\n  var params = payload.params[0];\n\n  if (params.from == null) {\n    this.emitPayload(\n      {\n        method: \"eth_coinbase\"\n      },\n      function(err, result) {\n        if (err) {\n          return end(err);\n        }\n\n        var coinbase = result.result;\n\n        params.from = coinbase;\n        next();\n      }\n    );\n  } else {\n    next();\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar StateManager = require(\"../statemanager.js\");\nvar to = require(\"../utils/to\");\nvar TXRejectedError = require(\"../utils/txrejectederror\");\n\nvar blockHelper = require(\"../utils/block_helper\");\nvar pkg = require(\"../../package.json\");\nconst { BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\nvar Subprovider = require(\"web3-provider-engine/subproviders/subprovider.js\");\n\ninherits(GethApiDouble, Subprovider);\n\nfunction GethApiDouble(options, provider) {\n  var self = this;\n\n  this.state = options.state || new StateManager(options, provider);\n  this.options = options;\n  this.initialized = false;\n\n  this.initialization_error = null;\n  this.post_initialization_callbacks = [];\n\n  this.state.initialize(function(err) {\n    if (err) {\n      self.initialization_error = err;\n    }\n    self.initialized = true;\n\n    var callbacks = self.post_initialization_callbacks;\n    self.post_initialization_callbacks = [];\n\n    callbacks.forEach(function(callback) {\n      setImmediate(function() {\n        callback(self.initialization_error, self.state);\n      });\n    });\n  });\n}\n\nGethApiDouble.prototype.waitForInitialization = function(callback) {\n  var self = this;\n  if (self.initialized === false) {\n    self.post_initialization_callbacks.push(callback);\n  } else {\n    callback(self.initialization_error, self.state);\n  }\n};\n\n// Function to not pass methods through until initialization is finished\nGethApiDouble.prototype.handleRequest = function(payload, next, end) {\n  var self = this;\n\n  if (self.initialization_error != null) {\n    return end(self.initialization_error);\n  }\n\n  if (self.initialized === false) {\n    self.waitForInitialization(self.getDelayedHandler(payload, next, end));\n    return;\n  }\n\n  var method = self[payload.method];\n\n  if (method == null) {\n    return end(new Error(\"Method \" + payload.method + \" not supported.\"));\n  }\n\n  var params = payload.params || [];\n  var args = [].concat(params);\n\n  var addedBlockParam = false;\n\n  if (self.requiresDefaultBlockParameter(payload.method) && args.length < method.length - 1) {\n    args.push(\"latest\");\n    addedBlockParam = true;\n  }\n\n  args.push(end);\n\n  // avoid crash by checking to make sure that we haven't specified too many arguments\n  if (\n    args.length > method.length ||\n    (method.minLength !== undefined && args.length < method.minLength) ||\n    (method.minLength === undefined && args.length < method.length)\n  ) {\n    var errorMessage = `Incorrect number of arguments. Method '${payload.method}' requires `;\n    if (method.minLength) {\n      errorMessage += `between ${method.minLength - 1} and ${method.length - 1} arguments. `;\n    } else {\n      errorMessage += `exactly ${method.length - 1} arguments. `;\n    }\n\n    if (addedBlockParam) {\n      errorMessage += \"Including the implicit block argument, r\";\n    } else {\n      // new sentence, capitalize it.\n      errorMessage += \"R\";\n    }\n    errorMessage += `equest specified ${args.length - 1} arguments: ${JSON.stringify(args)}.`;\n\n    return end(new Error(errorMessage));\n  }\n\n  method.apply(self, args);\n};\n\nGethApiDouble.prototype.getDelayedHandler = function(payload, next, end) {\n  var self = this;\n  return function(err, state) {\n    if (err) {\n      end(err);\n    }\n    self.handleRequest(payload, next, end);\n  };\n};\n\nGethApiDouble.prototype.requiresDefaultBlockParameter = function(method) {\n  // object for O(1) lookup.\n  var methods = {\n    eth_getBalance: true,\n    eth_getCode: true,\n    eth_getTransactionCount: true,\n    eth_getStorageAt: true,\n    eth_call: true,\n    eth_estimateGas: true\n  };\n\n  return methods[method] === true;\n};\n\n// Handle individual requests.\n\nGethApiDouble.prototype.eth_accounts = function(callback) {\n  callback(null, Object.keys(this.state.accounts));\n};\n\nGethApiDouble.prototype.eth_blockNumber = function(callback) {\n  this.state.blockNumber(function(err, result) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.hex(result));\n  });\n};\n\nGethApiDouble.prototype.eth_coinbase = function(callback) {\n  callback(null, this.state.coinbase);\n};\n\nGethApiDouble.prototype.eth_mining = function(callback) {\n  callback(null, this.state.is_mining);\n};\n\nGethApiDouble.prototype.eth_hashrate = function(callback) {\n  callback(null, \"0x0\");\n};\n\nGethApiDouble.prototype.eth_gasPrice = function(callback) {\n  callback(null, utils.addHexPrefix(this.state.gasPrice()));\n};\n\nGethApiDouble.prototype.eth_getBalance = function(address, blockNumber, callback) {\n  this.state.getBalance(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getCode = function(address, blockNumber, callback) {\n  this.state.getCode(address, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getBlockByNumber = function(blockNumber, includeFullTransactions, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err.message && err.message.indexOf(\"index out of range\") >= 0) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, blockHelper.toJSON(block, includeFullTransactions));\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockByHash = function(txHash, includeFullTransactions, callback) {\n  this.eth_getBlockByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByNumber = function(blockNumber, callback) {\n  this.state.blockchain.getBlock(blockNumber, function(err, block) {\n    if (err) {\n      if (err instanceof BlockOutOfRangeError) {\n        // block doesn't exist\n        return callback(null, 0);\n      }\n      return callback(err);\n    }\n    callback(null, block.transactions.length);\n  });\n};\n\nGethApiDouble.prototype.eth_getBlockTransactionCountByHash = function(blockHash, callback) {\n  this.eth_getBlockTransactionCountByNumber.apply(this, arguments);\n};\n\nGethApiDouble.prototype.eth_getTransactionReceipt = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      result = receipt.toJSON();\n    }\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByHash = function(hash, callback) {\n  this.state.getTransactionReceipt(hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    var result = null;\n\n    if (receipt) {\n      result = receipt.tx.toJsonRpc(receipt.block);\n    }\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockHashAndIndex = function(hashOrNumber, index, callback) {\n  index = to.number(index);\n\n  this.state.getBlock(hashOrNumber, function(err, block) {\n    if (err) {\n      // block doesn't exist by that hash\n      if (err.notFound) {\n        return callback(null, null);\n      } else {\n        return callback(err);\n      }\n    }\n\n    if (index >= block.transactions.length) {\n      return callback(new Error(\"Transaction at index \" + to.hex(index) + \" does not exist in block.\"));\n    }\n\n    var tx = block.transactions[index];\n    var result = tx.toJsonRpc(block);\n\n    callback(null, result);\n  });\n};\n\nGethApiDouble.prototype.eth_getTransactionByBlockNumberAndIndex = function(hashOrNumber, index, callback) {\n  this.eth_getTransactionByBlockHashAndIndex(hashOrNumber, index, callback);\n};\n\nGethApiDouble.prototype.eth_getTransactionCount = function(address, blockNumber, callback) {\n  this.state.getTransactionCount(address, blockNumber, (err, count) => {\n    if (err && err.message && err.message.indexOf(\"index out of range\") >= 0) {\n      err = new Error(\"Unknown block number\");\n    }\n    return callback(err, count);\n  });\n};\n\nGethApiDouble.prototype.eth_sign = function(address, dataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.sign(address, dataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_signTypedData = function(address, typedDataToSign, callback) {\n  var result;\n  var error;\n\n  try {\n    result = this.state.signTypedData(address, typedDataToSign);\n  } catch (e) {\n    error = e;\n  }\n\n  callback(error, result);\n};\n\nGethApiDouble.prototype.eth_sendTransaction = function(txData, callback) {\n  this.state.queueTransaction(\"eth_sendTransaction\", txData, null, callback);\n};\n\nGethApiDouble.prototype.eth_sendRawTransaction = function(rawTx, callback) {\n  let data;\n  if (rawTx) {\n    data = to.buffer(rawTx);\n  }\n\n  if (data === undefined) {\n    throw new TXRejectedError(\"rawTx must be a string, JSON-encoded Buffer, or Buffer.\");\n  }\n\n  this.state.queueRawTransaction(data, callback);\n};\n\nGethApiDouble.prototype.eth_call = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n\n  this.state.queueTransaction(\"eth_call\", txData, blockNumber, callback); // :(\n};\n\nGethApiDouble.prototype.eth_estimateGas = function(txData, blockNumber, callback) {\n  if (!txData.gas) {\n    txData.gas = this.state.blockchain.blockGasLimit;\n  }\n  this.state.queueTransaction(\"eth_estimateGas\", txData, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_getStorageAt = function(address, position, blockNumber, callback) {\n  this.state.queueStorage(address, position, blockNumber, callback);\n};\n\nGethApiDouble.prototype.eth_newBlockFilter = function(callback) {\n  var filterId = utils.addHexPrefix(utils.intToHex(this.state.latestFilterId));\n  this.state.latestFilterId += 1;\n  callback(null, filterId);\n};\n\nGethApiDouble.prototype.eth_getFilterChanges = function(filterId, callback) {\n  var blockHash = this.state\n    .latestBlock()\n    .hash()\n    .toString(\"hex\");\n  // Mine a block after each request to getFilterChanges so block filters work.\n  this.state.mine();\n  callback(null, [blockHash]);\n};\n\nGethApiDouble.prototype.eth_getLogs = function(filter, callback) {\n  this.state.getLogs(filter, callback);\n};\n\nGethApiDouble.prototype.eth_uninstallFilter = function(filterId, callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.eth_protocolVersion = function(callback) {\n  callback(null, \"63\");\n};\n\nGethApiDouble.prototype.bzz_hive = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.bzz_info = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.shh_version = function(callback) {\n  callback(null, \"2\");\n};\n\nGethApiDouble.prototype.eth_getCompilers = function(callback) {\n  callback(null, []);\n};\n\nGethApiDouble.prototype.eth_syncing = function(callback) {\n  callback(null, false);\n};\n\nGethApiDouble.prototype.net_listening = function(callback) {\n  callback(null, true);\n};\n\nGethApiDouble.prototype.net_peerCount = function(callback) {\n  callback(null, 0);\n};\n\nGethApiDouble.prototype.web3_clientVersion = function(callback) {\n  callback(null, \"EthereumJS TestRPC/v\" + pkg.version + \"/ethereum-js\");\n};\n\nGethApiDouble.prototype.web3_sha3 = function(string, callback) {\n  callback(null, to.hex(utils.sha3(string)));\n};\n\nGethApiDouble.prototype.net_version = function(callback) {\n  // net_version returns a string containing a base 10 integer.\n  callback(null, this.state.net_version + \"\");\n};\n\nGethApiDouble.prototype.miner_start = function(threads, callback) {\n  if (!callback && typeof threads === \"function\") {\n    callback = threads;\n    threads = null;\n  }\n\n  this.state.startMining(function(err) {\n    callback(err, true);\n  });\n};\n\n// indicate that `miner_start` only requires one argument (the callback)\nGethApiDouble.prototype.miner_start.minLength = 1;\n\nGethApiDouble.prototype.miner_stop = function(callback) {\n  this.state.stopMining(function(err) {\n    callback(err, true);\n  });\n};\n\nGethApiDouble.prototype.rpc_modules = function(callback) {\n  // returns the availible api modules and versions\n  callback(null, { eth: \"1.0\", net: \"1.0\", rpc: \"1.0\", web3: \"1.0\", evm: \"1.0\", personal: \"1.0\" });\n};\n\nGethApiDouble.prototype.personal_listAccounts = function(callback) {\n  callback(null, Object.keys(this.state.personal_accounts));\n};\n\nGethApiDouble.prototype.personal_newAccount = function(password, callback) {\n  var account = this.state.createAccount({ generate: true });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_importRawKey = function(rawKey, password, callback) {\n  var account = this.state.createAccount({ secretKey: rawKey });\n  this.state.accounts[account.address.toLowerCase()] = account;\n  this.state.personal_accounts[account.address.toLowerCase()] = true;\n  this.state.account_passwords[account.address.toLowerCase()] = password;\n  callback(null, account.address);\n};\n\nGethApiDouble.prototype.personal_lockAccount = function(address, callback) {\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var error = \"Account not found\";\n    return callback(error);\n  }\n  delete this.state.unlocked_accounts[address.toLowerCase()];\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_unlockAccount = function(address, password, duration, callback) {\n  // FIXME handle duration\n  var account = this.state.personal_accounts[address.toLowerCase()];\n  if (account !== true) {\n    var accountError = \"Account not found\";\n    return callback(accountError);\n  }\n\n  var storedPassword = this.state.account_passwords[address.toLowerCase()];\n  if (storedPassword !== undefined && storedPassword !== password) {\n    var passwordError = \"Invalid password\";\n    return callback(passwordError);\n  }\n\n  this.state.unlocked_accounts[address.toLowerCase()] = true;\n  callback(null, true);\n};\n\nGethApiDouble.prototype.personal_sendTransaction = function(txData, password, callback) {\n  if (txData.from == null) {\n    var error = \"Sender not found\";\n    callback(error);\n    return;\n  }\n\n  var from = utils.addHexPrefix(txData.from).toLowerCase();\n\n  var self = this;\n  self.personal_unlockAccount(from, password, null, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.state.queueTransaction(\"eth_sendTransaction\", txData, null, function(err, ret) {\n      self.state.unlocked_accounts[from.toLowerCase()] = false;\n      callback(err, ret);\n    });\n  });\n};\n\n/* Functions for testing purposes only. */\n\nGethApiDouble.prototype.evm_snapshot = function(callback) {\n  this.state.snapshot(callback);\n};\n\nGethApiDouble.prototype.evm_revert = function(snapshotId, callback) {\n  this.state.revert(snapshotId, callback);\n};\n\nGethApiDouble.prototype.evm_increaseTime = function(seconds, callback) {\n  callback(null, this.state.blockchain.increaseTime(seconds));\n};\n\nGethApiDouble.prototype.evm_setTime = function(date, callback) {\n  callback(null, this.state.blockchain.setTime(date));\n};\n\nGethApiDouble.prototype.evm_mine = function(timestamp, callback) {\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = undefined;\n  }\n  this.state.processBlock(timestamp, function(err) {\n    if (err) {\n      return callback(err);\n    }\n    callback(err, \"0x0\");\n  });\n};\n\n// indicate that `evm_mine` only requires one argument (the callback)\nGethApiDouble.prototype.evm_mine.minLength = 1;\n\nGethApiDouble.prototype.debug_traceTransaction = function(txHash, params, callback) {\n  if (typeof params === \"function\") {\n    callback = params;\n    params = [];\n  }\n\n  this.state.queueTransactionTrace(txHash, params, callback);\n};\n\n/*\n  RPC AUDIT:\n  TODO ETH: eth_getUncleCountByBlockHash, eth_getUncleCountByBlockNumber, eth_getUncleByBlockHashAndIndex,\n        eth_getUncleByBlockNumberAndIndex, eth_getWork, eth_submitWork, eth_submitHashrate\n\n  TODO DB: db_putString, db_getString, db_putHex, db_getHex\n\n  TODO WHISPER: shh_post, shh_newIdentity, shh_hasIdentity, shh_newGroup, shh_addToGroup,\n        shh_newFilter, shh_uninstallFilter, shh_getFilterChanges, shh_getMessages\n*/\n\n/**\n * Returns the number of uncles in a block from a block matching the given block hash.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block.\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockHash = function(hash, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns the number of uncles in a block from a block matching the given block number.\n *\n * @param {QUANTITY} blockNumber -\n *  ^integer of a block number, or the string \"latest\", \"earliest\" or \"pending\". Ex: '0xe8', // 232\n * @callback callback\n * @param {error} err - Error Object\n * @param {QUANTITY} result - integer of the number of uncles in this block.\n */\nGethApiDouble.prototype.eth_getUncleCountByBlockNumber = function(blockNumber, callback) {\n  callback(null, \"0x0\");\n};\n\n/**\n * Returns information about a uncle of a block by hash and uncle index position.\n *\n * @param {DATA, 32 Bytes} hash - hash of a block\n * @param {QUANTITY} index - the uncle's index position.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Object} result - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockHashAndIndex = function(hash, index, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns information about a uncle of a block by number and uncle index position.\n *\n * @param {QUANTITY} blockNumber -\n * ^a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the default block parameter.\n * @param {QUANTITY} uncleIndex - the uncle's index position.\n * @callback callback\n * @param {error} err - Error object\n * @param {Object} resutl - A block object,\n */\nGethApiDouble.prototype.eth_getUncleByBlockNumberAndIndex = function(blockNumber, uncleIndex, callback) {\n  callback(null, {});\n};\n\n/**\n * Returns: An Array with the following elements\n * 1: DATA, 32 Bytes - current block header pow-hash\n * 2: DATA, 32 Bytes - the seed hash used for the DAG.\n * 3: DATA, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.\n *\n * @param {QUANTITY} filterId - A filter id\n * @callback callback\n * @param {error} err - Error object\n * @param {Array} result - the hash of the current block, the seedHash, and the boundary condition to be met (\"target\").\n */\nGethApiDouble.prototype.eth_getWork = function(filterId, callback) {\n  callback(null, []);\n};\n\n/**\n * Used for submitting a proof-of-work solution\n *\n * @param {DATA, 8 Bytes} nonce - The nonce found (64 bits)\n * @param {DATA, 32 Bytes} powHash - The header's pow-hash (256 bits)\n * @param {DATA, 32 Bytes} digest - The mix digest (256 bits)\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the provided solution is valid, otherwise false.\n */\nGethApiDouble.prototype.eth_submitWork = function(nonce, powHash, digest, callback) {\n  callback(null, false);\n};\n\n/**\n * Used for submitting mining hashrate.\n *\n * @param {String} hashRate - a hexadecimal string representation (32 bytes) of the hash rate\n * @param {String} clientID - A random hexadecimal(32 bytes) ID identifying the client\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if submitting went through succesfully and false otherwise.\n */\nGethApiDouble.prototype.eth_submitHashrate = function(hashRate, clientID, callback) {\n  callback(null, false);\n};\n\n/**\n * Stores a string in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {String} value - String to store.\n * @callback callback\n * @param {error} err - Error object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putString = function(dbName, key, value, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns string from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} - Error Object\n * @param {String} result - The previously stored string.\n */\nGethApiDouble.prototype.db_getString = function(dbName, key, callback) {\n  callback(null, \"\");\n};\n\n/**\n * Stores binary data in the local database.\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @param {DATA} data - Data to store.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the value was stored, otherwise false.\n */\nGethApiDouble.prototype.db_putHex = function(dbName, key, data, callback) {\n  callback(null, false);\n};\n\n/**\n * Returns binary data from the local database\n *\n * @param {String} dbName - Database name.\n * @param {String} key - Key name.\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA} result - The previously stored data.\n */\nGethApiDouble.prototype.db_getHex = function(dbName, key, callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Sends a whisper message.\n *\n * @param {DATA, 60 Bytes} from - (optional) The identity of the sender.\n * @param {DATA, 60 Bytes} to -\n *  ^(optional) The identity of the receiver. When present whisper will encrypt the message so that\n *  only the receiver can decrypt it.\n * @param {Array of DATA} topics - Array of DATA topics, for the receiver to identify messages.\n * @param {DATA} payload - The payload of the message.\n * @param {QUANTITY} priority - The integer of the priority in a range from ... (?).\n * @param {QUANTITY} ttl - integer of the time to live in seconds.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the message was sent, otherwise false.\n */\nGethApiDouble.prototype.shh_post = function(from, to, topics, payload, priority, ttl, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates new whisper identity in the client.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new identiy.\n */\nGethApiDouble.prototype.shh_newIdentity = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Checks if the client hold the private keys for a given identity.\n *\n * @param {DATA, 60 Bytes} address - The identity address to check.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the client holds the privatekey for that identity, otherwise false.\n */\nGethApiDouble.prototype.shh_hasIdentity = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates a new group.\n *\n * @callback callback\n * @param {error} err - Error Object\n * @param {DATA, 60 Bytes} result - the address of the new group.\n */\nGethApiDouble.prototype.shh_newGroup = function(callback) {\n  callback(null, \"0x00\");\n};\n\n/**\n * Adds a whisper identity to the group\n *\n * @param {DATA, 60 Bytes} - The identity address to add to a group.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_addToGroup = function(address, callback) {\n  callback(null, false);\n};\n\n/**\n * Creates filter to notify, when client receives whisper message matching the filter options.\n *\n * @param {DATA, 60 Bytes} to -\n * ^(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n *  if the client holds the private key to this identity.\n * @param {Array of DATA} topics - Array of DATA topics which the incoming message's topics should match.\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - returns true if the identity was successfully added to the group, otherwise false.\n */\nGethApiDouble.prototype.shh_newFilter = function(to, topics, callback) {\n  callback(null, false);\n};\n\n/**\n * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n * Additonally Filters timeout when they aren't requested with shh_getFilterChanges for a period of time.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Boolean} result - true if the filter was successfully uninstalled, otherwise false.\n */\nGethApiDouble.prototype.shh_uninstallFilter = function(id, callback) {\n  callback(null, false);\n};\n\n/**\n * Polling method for whisper filters. Returns new messages since the last call of this method.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges\n */\nGethApiDouble.prototype.shh_getFilterChanges = function(id, callback) {\n  callback(null, []);\n};\n\n/**\n * Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.\n *\n * @param {QUANTITY} id - The filter id. Ex: \"0x7\"\n * @callback callback\n * @param {error} err - Error Object\n * @param {Array} result - See: shh_getFilterChanges\n */\nGethApiDouble.prototype.shh_getMessages = function(id, callback) {\n  callback(null, false);\n};\n\nmodule.exports = GethApiDouble;\n","var Account = require(\"ethereumjs-account\");\nvar RuntimeError = require(\"./utils/runtimeerror\");\nvar Transaction = require(\"./utils/transaction\");\nvar utils = require(\"ethereumjs-util\");\nvar seedrandom = require(\"seedrandom\");\nvar bip39 = require(\"bip39\");\nvar wallet = require(\"ethereumjs-wallet\");\nvar hdkey = require(\"ethereumjs-wallet/hdkey\");\nvar async = require(\"async\");\nvar BlockchainDouble = require(\"./blockchain_double.js\");\nvar ForkedBlockchain = require(\"./utils/forkedblockchain.js\");\nvar Web3 = require(\"web3\");\nvar sigUtil = require(\"eth-sig-util\");\nvar _ = require(\"lodash\");\nconst { BlockOutOfRangeError } = require(\"./utils/errorhelper\");\n\nconst ZERO_BUFFER = Buffer.from([0]);\n\nvar to = require(\"./utils/to\");\nvar random = require(\"./utils/random\");\nvar TXRejectedError = require(\"./utils/txrejectederror\");\n\nfunction StateManager(options, provider) {\n  this.options = options = this._applyDefaultOptions(options || {});\n\n  if (options.fork) {\n    this.blockchain = new ForkedBlockchain(options);\n  } else {\n    this.blockchain = new BlockchainDouble(options);\n  }\n\n  this.vm = this.blockchain.vm;\n  this.stateTrie = this.blockchain.stateTrie;\n\n  this.accounts = {};\n  this.secure = !!options.secure;\n  this.account_passwords = {};\n  this.personal_accounts = {};\n  this.total_accounts = options.total_accounts;\n  this.coinbase = null;\n\n  this.latest_filter_id = 1;\n\n  // This queue manages actions that shouldn't be run in parallel.\n  // The action_processing flag ensures new actions are queued instead of\n  // run immediately.\n  this.action_queue = [];\n  this.action_processing = false;\n\n  this.snapshots = [];\n  this.logger = options.logger;\n  this.net_version = options.network_id;\n  this.mnemonic = options.mnemonic;\n  this.wallet = hdkey.fromMasterSeed(bip39.mnemonicToSeed(this.mnemonic));\n  this.wallet_hdpath = options.hdPath;\n\n  this.gasPriceVal = to.rpcQuantityHexString(options.gasPrice);\n\n  this.is_mining = true;\n  this.blockTime = options.blockTime;\n  this.is_mining_on_interval = !!options.blockTime;\n  this.mining_interval_timeout = null;\n\n  this._provider = provider;\n}\n\nconst defaultOptions = {\n  total_accounts: 10,\n  gasPrice: \"0x77359400\", // 2 gwei\n  default_balance_ether: 100,\n  unlocked_accounts: [],\n  hdPath: \"m/44'/60'/0'/0/\"\n};\n\nStateManager.prototype._applyDefaultOptions = function(options) {\n  // do this so that we can use the same seed on our next run and get the same\n  // results without explicitly setting a seed up front\n  if (!options.seed) {\n    options.seed = random.randomAlphaNumericString(10, seedrandom());\n  }\n\n  // generate a randomized default mnemonic\n  if (!options.mnemonic) {\n    let randomBytes = random.randomBytes(16, seedrandom(options.seed));\n    options.mnemonic = bip39.entropyToMnemonic(randomBytes.toString(\"hex\"));\n  }\n\n  if (!options.fork && !options.network_id) {\n    options.network_id = new Date().getTime();\n  }\n\n  // We want this function to mutate the options object so that we can report\n  // our settings back to our consumer application (e.g., ganache)\n  return _.merge(options, defaultOptions, Object.assign({}, options));\n};\n\nStateManager.prototype.initialize = function(callback) {\n  var self = this;\n\n  var accounts = [];\n\n  let defaultBalanceWei = to.hex(Web3.utils.toWei(self.options.default_balance_ether.toString(), \"ether\"));\n\n  if (self.options.accounts) {\n    accounts = self.options.accounts.map(self.createAccount.bind(self));\n  } else {\n    if (!self.total_accounts) {\n      return callback(\n        new Error(\"Cannot initialize chain: either options.accounts or options.total_accounts must be specified\")\n      );\n    }\n\n    for (var i = 0; i < self.total_accounts; i++) {\n      accounts.push(\n        self.createAccount({\n          index: i,\n          balance: defaultBalanceWei\n        })\n      );\n    }\n  }\n\n  self.coinbase = to.hex(accounts[0].address);\n  self.accounts = {};\n\n  accounts.forEach(function(data) {\n    self.accounts[data.address] = data;\n    self.personal_accounts[data.address.toLowerCase()] = true;\n  });\n\n  // Turn array into object, mostly for speed purposes.\n  // No need for caller to specify private keys.\n  self.unlocked_accounts = self.options.unlocked_accounts.reduce(function(obj, address) {\n    // If it doesn't have a hex prefix, must be a number (either a string or number type).\n    if ((address + \"\").indexOf(\"0x\") !== 0) {\n      let idx = parseInt(address);\n      let account = accounts[idx];\n      if (!account) {\n        throw new Error(`Account at index ${idx} not found. Max index available is ${accounts.length - 1}.`);\n      }\n      address = account.address.toLowerCase();\n    }\n\n    obj[address.toLowerCase()] = true; // can be any value\n    return obj;\n  }, {});\n\n  if (!self.secure) {\n    accounts.forEach(function(data) {\n      self.unlocked_accounts[data.address.toLowerCase()] = data;\n    });\n  }\n\n  self.blockchain.initialize(accounts, function(err) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If the user didn't pass a specific version id in, then use the\n    // forked blockchain's version (if it exists) or create our own.\n    if (!self.net_version) {\n      self.net_version = self.blockchain.forkVersion;\n    }\n\n    if (self.is_mining_on_interval) {\n      self.mineOnInterval();\n    }\n\n    callback();\n  });\n};\n\nStateManager.prototype._minerCancellationToken = null;\nStateManager.prototype.mineOnInterval = function() {\n  // cancel the a previous miner's timeout\n  clearTimeout(this.mining_interval_timeout);\n\n  // make sure a pending eth_mine doesn't come back and execute mineOnInterval\n  // again...\n  if (this._minerCancellationToken !== null) {\n    this._minerCancellationToken.cancelled = true;\n  }\n\n  // if mining was stopped `mineOnInterval` shouldn't start mining again\n  if (!this.is_mining) {\n    this.logger.log(\"Warning: mineOnInterval called when miner was stopped\");\n    return;\n  }\n\n  const cancellationToken = { cancelled: false };\n  this._minerCancellationToken = cancellationToken;\n\n  const timeout = (this.mining_interval_timeout = setTimeout(\n    this._provider.send.bind(this._provider),\n    this.blockTime * 1000,\n    { method: \"evm_mine\" },\n    () => {\n      if (!cancellationToken.cancelled) {\n        this.mineOnInterval.bind(this)();\n      }\n    }\n  ));\n\n  // Ensure this won't keep a node process open.\n  if (typeof timeout.unref === \"function\") {\n    timeout.unref();\n  }\n};\n\nStateManager.prototype.createAccount = function(opts, i) {\n  var secretKey;\n\n  if (opts.generate) {\n    secretKey = wallet.generate().getPrivateKey();\n  } else if (opts.secretKey) {\n    secretKey = utils.toBuffer(to.hex(opts.secretKey));\n  } else {\n    var index = typeof opts.index === \"undefined\" ? i : opts.index;\n    var acct = this.wallet.derivePath(this.wallet_hdpath + index); // index is a number\n    secretKey = acct.getWallet().getPrivateKey(); // Buffer\n  }\n\n  var publicKey = utils.privateToPublic(secretKey);\n  var address = utils.publicToAddress(publicKey);\n\n  var account = new Account();\n\n  account.balance = to.hex(opts.balance);\n\n  var data = {\n    secretKey: secretKey,\n    publicKey: publicKey,\n    address: to.hex(address).toLowerCase(),\n    account: account\n  };\n\n  return data;\n};\n\nStateManager.prototype.blockNumber = function(callback) {\n  return this.blockchain.getHeight(callback);\n};\n\nStateManager.prototype.gasPrice = function() {\n  return this.gasPriceVal;\n};\n\nStateManager.prototype.getBalance = function(address, number, callback) {\n  this.blockchain.getBalance(address, number, function(err, balance) {\n    if (balance) {\n      balance = to.rpcQuantityHexString(balance);\n    }\n    callback(err, balance);\n  });\n};\n\nStateManager.prototype.getTransactionCount = function(address, number, callback) {\n  this.blockchain.getNonce(address, number, function(err, nonce) {\n    if (nonce) {\n      nonce = to.rpcQuantityHexString(nonce);\n    }\n    callback(err, nonce);\n  });\n};\n\nStateManager.prototype.getCode = function(address, number, callback) {\n  this.blockchain.getCode(address, number, function(err, code) {\n    if (code) {\n      code = to.hex(code);\n    }\n    callback(err, code);\n  });\n};\n\nStateManager.prototype.queueRawTransaction = function(data, callback) {\n  const tx = new Transaction(data, Transaction.types.signed);\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = to.hex(tx.from).toLowerCase();\n  this._queueTransaction(\"eth_sendRawTransaction\", tx, from, null, callback);\n};\n\nStateManager.prototype.queueStorage = function(address, position, block, callback) {\n  this.action_queue.push({\n    method: \"eth_getStorageAt\",\n    address: utils.addHexPrefix(address),\n    position: utils.addHexPrefix(position),\n    block: block,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransaction = function(method, txJsonRpc, blockNumber, callback) {\n  // use toLowerCase() to properly handle from addresses meant to be validated.\n  const from = txJsonRpc.from ? to.hex(txJsonRpc.from).toLowerCase() : null;\n\n  if (from == null) {\n    callback(new TXRejectedError(\"from not found; is required\"));\n    return;\n  }\n\n  // Error checks. It's possible to JSON.stringify a Buffer to JSON.\n  // we actually now handle this \"properly\" (not sure about spec), but for\n  // legacy reasons we don't allow it.\n  if (txJsonRpc.to && typeof txJsonRpc.to !== \"string\") {\n    return callback(new TXRejectedError(\"Invalid to address\"));\n  }\n\n  const isKnownAccount = this.accounts.hasOwnProperty(from);\n\n  if (method === \"eth_sendTransaction\" && !this.unlocked_accounts.hasOwnProperty(from)) {\n    const msg = isKnownAccount ? \"signer account is locked\" : \"sender account not recognized\";\n    return callback(new TXRejectedError(msg));\n  }\n\n  let type = Transaction.types.none;\n  if (!isKnownAccount || method === \"eth_call\") {\n    type |= Transaction.types.fake;\n  }\n\n  let tx;\n  try {\n    tx = Transaction.fromJSON(txJsonRpc, type);\n    this._setTransactionDefaults(tx);\n  } catch (e) {\n    callback(e);\n    return;\n  }\n  this._queueTransaction(method, tx, from, blockNumber, callback);\n};\n\nStateManager.prototype._setTransactionDefaults = function(tx) {\n  if (tx.gasLimit.length === 0) {\n    tx.gasLimit = utils.toBuffer(this.blockchain.defaultTransactionGasLimit);\n  }\n\n  if (tx.gasPrice.length === 0) {\n    tx.gasPrice = utils.toBuffer(this.gasPriceVal);\n  }\n\n  if (tx.value.length === 0) {\n    tx.value = Buffer.from([0]);\n  }\n\n  if (tx.to.length === 0 || tx.to.equals(ZERO_BUFFER)) {\n    tx.to = Buffer.allocUnsafe(0);\n  }\n};\n\nStateManager.prototype._queueTransaction = function(method, tx, from, blockNumber, callback) {\n  if (!(tx instanceof Transaction)) {\n    throw new TXRejectedError(\"tx must be of type Transaction\");\n  }\n\n  // If the transaction has a higher gas limit than the block gas limit, error.\n  if (to.number(tx.gasLimit) > to.number(this.blockchain.blockGasLimit)) {\n    return callback(new TXRejectedError(\"Exceeds block gas limit\"));\n  }\n\n  this.action_queue.push({\n    method,\n    from,\n    tx,\n    callback,\n    blockNumber\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.queueTransactionTrace = function(txHash, params, callback) {\n  this.action_queue.push({\n    method: \"debug_traceTransaction\",\n    hash: to.hex(txHash),\n    params: params,\n    callback: callback\n  });\n\n  // We know there's work, so get started.\n  this.processNextAction();\n};\n\nStateManager.prototype.processNextAction = function(override) {\n  var self = this;\n\n  if (override !== true) {\n    if (this.action_processing === true || this.action_queue.length === 0) {\n      return;\n    }\n  }\n\n  var queued = this.action_queue.shift();\n\n  // Set the flag that we're currently processing something.\n  this.action_processing = true;\n\n  var intermediary = function(err, result) {\n    queued.callback(err, result);\n\n    if (self.action_queue.length > 0) {\n      self.processNextAction(true);\n    } else {\n      self.action_processing = false;\n    }\n  };\n\n  if (typeof queued.method === \"function\") {\n    var result = queued.method();\n    return intermediary(null, result);\n  } else if (queued.method === \"eth_getStorageAt\") {\n    this.blockchain.getStorage(queued.address, queued.position, queued.block, function(err, result) {\n      if (err) {\n        return intermediary(err);\n      }\n\n      if (result) {\n        result = utils.rlp.decode(result);\n      }\n\n      result = to.hex(result || 0);\n      intermediary(null, result);\n    });\n  } else if (queued.method === \"debug_traceTransaction\") {\n    this.blockchain.processTransactionTrace(queued.hash, queued.params, intermediary);\n  } else if (queued.method === \"eth_sendTransaction\" || queued.method === \"eth_sendRawTransaction\") {\n    this.processTransaction(queued.from, queued.tx, intermediary);\n  } else if (queued.method === \"eth_call\") {\n    this.processCall(queued.from, queued.tx, queued.blockNumber, intermediary);\n  } else if (queued.method === \"eth_estimateGas\") {\n    this.processGasEstimate(queued.from, queued.tx, queued.blockNumber, intermediary);\n  }\n};\n\nStateManager.prototype.sign = function(address, dataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  var secretKey = account.secretKey;\n  var msg = Buffer.from(dataToSign.replace(\"0x\", \"\"), \"hex\");\n  var msgHash = utils.hashPersonalMessage(msg);\n  var sgn = utils.ecsign(msgHash, Buffer.from(secretKey));\n  return utils.toRpcSig(sgn.v, sgn.r, sgn.s);\n};\n\nStateManager.prototype.signTypedData = function(address, typedDataToSign) {\n  var account = this.accounts[to.hex(address).toLowerCase()];\n  if (!account) {\n    throw new Error(\"cannot sign data; no private key\");\n  }\n\n  if (!typedDataToSign.types) {\n    throw new Error(\"cannot sign data; types missing\");\n  }\n\n  if (!typedDataToSign.types.EIP712Domain) {\n    throw new Error(\"cannot sign data; EIP712Domain definition missing\");\n  }\n\n  if (!typedDataToSign.domain) {\n    throw new Error(\"cannot sign data; domain missing\");\n  }\n\n  if (!typedDataToSign.primaryType) {\n    throw new Error(\"cannot sign data; primaryType missing\");\n  }\n\n  if (!typedDataToSign.message) {\n    throw new Error(\"cannot sign data; message missing\");\n  }\n\n  return sigUtil.signTypedData(account.secretKey, { data: typedDataToSign });\n};\n\nStateManager.prototype.printTransactionReceipt = function(txHash, error, callback) {\n  var self = this;\n\n  self.blockchain.getTransactionReceipt(txHash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.latestBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      receipt = receipt.toJSON();\n\n      self.logger.log(\"\");\n      self.logger.log(\"  Transaction: \" + txHash);\n\n      if (receipt.contractAddress != null) {\n        self.logger.log(\"  Contract created: \" + receipt.contractAddress);\n      }\n\n      self.logger.log(\"  Gas usage: \" + parseInt(receipt.gasUsed, 16));\n      self.logger.log(\"  Block Number: \" + parseInt(receipt.blockNumber, 16));\n      self.logger.log(\"  Block Time: \" + new Date(to.number(block.header.timestamp) * 1000).toString());\n\n      if (error) {\n        self.logger.log(\"  Runtime Error: \" + error.error);\n        if (error.reason) {\n          self.logger.log(\"  Revert reason: \" + error.reason);\n        }\n      }\n\n      self.logger.log(\"\");\n\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.processBlock = function(timestamp, callback) {\n  var self = this;\n\n  if (typeof timestamp === \"function\") {\n    callback = timestamp;\n    timestamp = null;\n  }\n\n  self.blockchain.processNextBlock(timestamp, function(runtimeError, transactions, vmOutput) {\n    if (runtimeError && runtimeError instanceof RuntimeError === false) {\n      // This is bad. Get out.\n      return callback(runtimeError, transactions, vmOutput);\n    }\n\n    // TODO: Can we refactor printTransactionReceipt so it's synchronous?\n    // We technically have the raw vm receipts (though they're not full receipts here...).\n    async.eachSeries(\n      transactions,\n      function(tx, finishedPrinting) {\n        var hash = to.hex(tx.hash());\n        var error = runtimeError == null ? { results: {} } : runtimeError;\n        self.printTransactionReceipt(hash, error.results[hash], finishedPrinting);\n      },\n      callback(runtimeError, transactions, vmOutput)\n    );\n  });\n};\n\nStateManager.prototype.processBlocks = function(totalBlocks, callback) {\n  var self = this;\n\n  if (typeof totalBlocks === \"function\") {\n    callback = totalBlocks;\n    totalBlocks = null;\n  }\n\n  // Note: VM errors (errors that the VM directly returns) trump all runtime errors.\n  var runtimeError = null;\n  var amountProcessed = 0;\n\n  async.whilst(\n    function() {\n      var shouldContinue;\n\n      if (totalBlocks == null) {\n        shouldContinue = self.blockchain.pending_transactions.length > 0;\n      } else {\n        shouldContinue = amountProcessed < totalBlocks;\n      }\n\n      return shouldContinue;\n    },\n    function(done) {\n      self.processBlock(function(err, transactions, vmOutput) {\n        amountProcessed += 1;\n\n        if (err) {\n          if (err instanceof RuntimeError === false) {\n            // This is bad. Get out.\n            return done(err);\n          }\n\n          // We must have a RuntimeError. Merge results if we've found\n          // other runtime errors during this execution.\n          if (runtimeError == null) {\n            runtimeError = err;\n          } else {\n            runtimeError.combine(err);\n          }\n        }\n\n        // Note we don't quit on runtime errors. We keep processing transactions.\n        done();\n      });\n    },\n    function(err) {\n      // Remember: vm errors trump runtime errors\n      callback(err || runtimeError);\n    }\n  );\n};\n\nStateManager.prototype.processCall = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        if (err instanceof BlockOutOfRangeError) {\n          // block doesn't exist\n          return callback(null, null);\n        }\n        return callback(err);\n      }\n\n      var result = \"0x\";\n      if (!results.error && results.vm.return) {\n        result = to.hex(results.vm.return);\n      } else if (results.error) {\n        self.logger.log(`Error processing call: ${results.error}`);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processGasEstimate = function(from, tx, blockNumber, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.processCall(tx, blockNumber, function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var result = \"0x\";\n      if (!results.error) {\n        result = results.gasRefund ? to.hex(results.gasUsed.add(results.gasRefund)) : to.hex(results.gasUsed);\n      } else {\n        self.logger.log(`Error calculating gas estimate: ${results.error}`);\n      }\n      return callback(null, result);\n    });\n  });\n};\n\nStateManager.prototype.processTransaction = function(from, tx, callback) {\n  var self = this;\n\n  self.createTransactionWithCorrectNonce(tx, from, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.blockchain.queueTransaction(tx);\n\n    var txHash = to.hex(tx.hash());\n\n    // If we're not currently mining or we're mining on an interval,\n    // only queue the transaction, don't process it.\n    if (self.is_mining === false || self.is_mining_on_interval) {\n      return callback(null, txHash);\n    }\n\n    self.processBlocks(function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, txHash);\n    });\n  });\n};\n\nStateManager.prototype.getTransactionReceipt = function(hash, callback) {\n  this.blockchain.getTransactionReceipt(hash, function(err, receipt) {\n    if (err && err.notFound) {\n      // Return null if the receipt's not found.\n      return callback(null, null);\n    }\n    callback(err, receipt);\n  });\n};\n\nStateManager.prototype.getBlock = function(hashOrNumber, callback) {\n  this.blockchain.getBlock(hashOrNumber, callback);\n};\n\nStateManager.prototype.getLogs = function(filter, callback) {\n  var self = this;\n\n  // filter.address may be a single address or an array\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs\n  var expectedAddress = filter.address && (Array.isArray(filter.address) ? filter.address : [filter.address]);\n  expectedAddress =\n    expectedAddress &&\n    expectedAddress.map(function(a) {\n      return a.toLowerCase();\n    });\n  var expectedTopics = filter.topics || [];\n\n  async.parallel(\n    {\n      fromBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.fromBlock || \"latest\"),\n      toBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, filter.toBlock || \"latest\"),\n      latestBlock: this.blockchain.getEffectiveBlockNumber.bind(this.blockchain, \"latest\")\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n      var fromBlock = results.fromBlock;\n      var toBlock = results.toBlock;\n      var latestBlock = results.latestBlock;\n\n      if (toBlock > latestBlock) {\n        toBlock = latestBlock;\n      }\n\n      var logs = [];\n      var current = fromBlock;\n\n      async.whilst(\n        function() {\n          return current <= toBlock;\n        },\n        function(finished) {\n          self.blockchain.getBlockLogs(current, function(err, blockLogs) {\n            if (err) {\n              return finished(err);\n            }\n\n            // Filter logs that match the address\n            var filtered = !expectedAddress\n              ? blockLogs\n              : blockLogs.filter(function(log) {\n                return expectedAddress.indexOf(log.address.toLowerCase()) > -1;\n              });\n\n            // Now filter based on topics.\n            filtered = filtered.filter(function(log) {\n              var keep = true;\n              for (var i = 0; i < expectedTopics.length; i++) {\n                var expectedTopic = expectedTopics[i];\n                var logTopic = log.topics[i];\n                if (expectedTopic == null) {\n                  continue;\n                }\n                var isMatch = Array.isArray(expectedTopic)\n                  ? expectedTopic.includes(logTopic)\n                  : expectedTopic === logTopic;\n                if (i >= log.topics.length || !isMatch) {\n                  keep = false;\n                  break;\n                }\n              }\n              return keep;\n            });\n\n            logs.push.apply(logs, filtered);\n\n            current += 1;\n            finished();\n          });\n        },\n        function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          logs = logs.map(function(log) {\n            return log.toJSON();\n          });\n\n          callback(err, logs);\n        }\n      );\n    }\n  );\n};\n\n// Note: Snapshots have 1-based ids.\nStateManager.prototype.snapshot = function(callback) {\n  var self = this;\n\n  this.blockchain.getHeight(function(err, blockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.snapshots.push({\n      blockNumber: blockNumber,\n      timeAdjustment: self.blockchain.timeAdjustment\n    });\n\n    self.logger.log(\"Saved snapshot #\" + self.snapshots.length);\n\n    callback(null, to.hex(self.snapshots.length));\n  });\n};\n\nStateManager.prototype.revert = function(snapshotId, callback) {\n  var self = this;\n\n  // Convert from hex.\n  snapshotId = utils.bufferToInt(snapshotId);\n\n  this.logger.log(\"Reverting to snapshot #\" + snapshotId);\n\n  if (snapshotId > this.snapshots.length) {\n    return false;\n  }\n\n  // Convert to zero based.\n  snapshotId = snapshotId - 1;\n  var timeAdjustment = this.snapshots[snapshotId].timeAdjustment;\n\n  // Loop through each snapshot with a higher id than the current one.\n  async.whilst(\n    function() {\n      return self.snapshots.length > snapshotId;\n    },\n    function(nextSnapshot) {\n      var snapshot = self.snapshots.pop();\n\n      // For each snapshot, asynchronously pop off the blocks it represents.\n      async.during(\n        function(doneWithTest) {\n          self.blockchain.getHeight(function(err, blockNumber) {\n            if (err) {\n              return doneWithTest(err);\n            }\n\n            doneWithTest(null, blockNumber > snapshot.blockNumber);\n          });\n        },\n        function(nextBlock) {\n          self.blockchain.popBlock(function(err) {\n            if (err) {\n              return nextBlock(err);\n            }\n            nextBlock();\n          });\n        },\n        nextSnapshot\n      );\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Pending transactions are removed when you revert.\n      self.blockchain.clearPendingTransactions();\n      // The time adjustment is restored to its prior state\n      self.blockchain.timeAdjustment = timeAdjustment;\n\n      callback(null, true);\n    }\n  );\n};\n\nStateManager.prototype.hasContractCode = function(address, callback) {\n  this.vm.stateManager.getContractCode(address, function(err, result) {\n    if (err != null) {\n      callback(err, false);\n    } else {\n      callback(null, true);\n    }\n  });\n};\n\nStateManager.prototype.startMining = function(callback) {\n  if (this.is_mining) {\n    callback();\n    this.logger.log(\"Warning: startMining called when miner was already started\");\n    return;\n  }\n\n  this.is_mining = true;\n\n  if (this.is_mining_on_interval) {\n    this.mineOnInterval();\n    callback();\n  } else {\n    this.processBlocks(callback);\n  }\n};\n\nStateManager.prototype.stopMining = function(callback) {\n  if (this.is_mining) {\n    if (this._minerCancellationToken) {\n      this._minerCancellationToken.cancelled = true;\n      this._minerCancellationToken = null;\n    }\n    this.is_mining = false;\n    clearTimeout(this.mining_interval_timeout);\n    this.mining_interval_timeout = null;\n  } else {\n    this.logger.log(\"Warning: stopMining called when miner was already stopped\");\n  }\n  callback && callback();\n};\n\nStateManager.prototype.isUnlocked = function(address) {\n  return this.unlocked_accounts[address.toLowerCase()] != null;\n};\n\nStateManager.prototype.createTransactionWithCorrectNonce = function(tx, from, callback) {\n  // account for transactions waiting in the tx queue\n  this.blockchain.getQueuedNonce(from, (err, expectedNonce) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const validateNonce = (tx, expectedNonce) => {\n      if (tx.validateNonce(expectedNonce)) {\n        return Promise.resolve(tx);\n      } else {\n        const expected = to.number(expectedNonce);\n        const actual = to.number(tx.nonce);\n        return Promise.reject(\n          new TXRejectedError(\n            `the tx doesn't have the correct nonce. account has nonce of: ${expected} tx has nonce of: ${actual}`\n          )\n        );\n      }\n    };\n    const done = (tx) => callback(null, tx);\n\n    if (tx.isSigned()) {\n      validateNonce(tx, expectedNonce)\n        .then(done)\n        .catch(callback);\n    } else {\n      const sign = (tx) => {\n        // we need to sign transactions if they haven't been signed already\n        // but we never sign fake transactions\n        if (!tx.isFake() && !tx.isSigned()) {\n          const account = this.accounts[from];\n          if (account) {\n            tx.sign(account.secretKey);\n          }\n        }\n        return Promise.resolve(tx);\n      };\n\n      // Validate the tx's nonce and then sign the transaction.\n      // By signing this transaction now we ensure all future calls to tx.hash()\n      // return the same signed transaction hash. It's sort of an unintuitive\n      // quirk of etheremjs-tx that:\n      //   tx.hash(includeSignature);\n      //   tx.sign(secretKey);\n      //   tx.hash(includeSignature);\n      // will produce different hashes.\n      if (tx.nonce.length === 0) {\n        // Since this transaction is unsigned and the nonce was not defined\n        // we can go ahead and change the nonce and not worry about\n        // invalidating the tx hash the client may be expecting (automatic nonce\n        // calculation should have been expected by the client in this case).\n        tx.nonce = expectedNonce;\n        sign(tx).then(done);\n      } else {\n        validateNonce(tx, expectedNonce)\n          .then(sign)\n          .then(done)\n          .catch(callback);\n      }\n    }\n  });\n};\nmodule.exports = StateManager;\n","module.exports = require(\"ethereumjs-abi\");","module.exports = require(\"ethereumjs-tx\");","module.exports = require(\"ethereumjs-tx/fake\");","module.exports = require(\"assert\");","module.exports = require(\"rlp\");","module.exports = require(\"seedrandom\");","module.exports = require(\"bip39\");","module.exports = require(\"safe-buffer\");","module.exports = require(\"crypto\");","module.exports = require(\"scrypt.js\");","module.exports = require(\"uuid/v4\");","module.exports = require(\"bs58check\");","'use strict';\n\nvar HDKey = require('hdkey');\nvar Wallet = require('./index.js');\n\nfunction EthereumHDKey() {}\n\n/*\n * Horrible wrapping.\n */\nfunction fromHDKey(hdkey) {\n  var ret = new EthereumHDKey();\n  ret._hdkey = hdkey;\n  return ret;\n}\n\nEthereumHDKey.fromMasterSeed = function (seedBuffer) {\n  return fromHDKey(HDKey.fromMasterSeed(seedBuffer));\n};\n\nEthereumHDKey.fromExtendedKey = function (base58key) {\n  return fromHDKey(HDKey.fromExtendedKey(base58key));\n};\n\nEthereumHDKey.prototype.privateExtendedKey = function () {\n  if (!this._hdkey.privateExtendedKey) {\n    throw new Error('This is a public key only wallet');\n  }\n  return this._hdkey.privateExtendedKey;\n};\n\nEthereumHDKey.prototype.publicExtendedKey = function () {\n  return this._hdkey.publicExtendedKey;\n};\n\nEthereumHDKey.prototype.derivePath = function (path) {\n  return fromHDKey(this._hdkey.derive(path));\n};\n\nEthereumHDKey.prototype.deriveChild = function (index) {\n  return fromHDKey(this._hdkey.deriveChild(index));\n};\n\nEthereumHDKey.prototype.getWallet = function () {\n  if (this._hdkey._privateKey) {\n    return Wallet.fromPrivateKey(this._hdkey._privateKey);\n  } else {\n    return Wallet.fromPublicKey(this._hdkey._publicKey, true);\n  }\n};\n\nmodule.exports = EthereumHDKey;","module.exports = require(\"hdkey\");","module.exports = require(\"ethereumjs-vm\");","module.exports = require(\"heap\");","var LevelUpArrayAdapter = require(\"./database/leveluparrayadapter\");\nvar LevelUpObjectAdapter = require(\"./database/levelupobjectadapter\");\nvar levelup = require(\"levelup\");\nvar encode = require(\"encoding-down\");\nvar filedown = require(\"./database/filedown\");\nvar cachedown = require(\"cachedown\");\nvar txserializer = require(\"./database/txserializer\");\nvar blockserializer = require(\"./database/blockserializer\");\nvar bufferserializer = require(\"./database/bufferserializer\");\nvar BlockLogsSerializer = require(\"./database/blocklogsserializer\");\nvar ReceiptSerializer = require(\"./database/receiptserializer\");\nvar tmp = require(\"tmp\");\n\nfunction Database(options) {\n  this.options = options;\n}\n\nDatabase.prototype.initialize = function(callback) {\n  var self = this;\n\n  function getDir(cb) {\n    if (self.options.db_path) {\n      cb(null, self.options.db_path);\n    } else {\n      tmp.dir(cb);\n    }\n  }\n\n  getDir(function(err, directory) {\n    if (err) {\n      return callback(err);\n    }\n    const levelupOptions = { valueEncoding: \"json\" };\n    if (self.options.db) {\n      const store = self.options.db;\n      levelup(store, levelupOptions, finishInitializing);\n    } else {\n      const store = encode(cachedown(directory, filedown).maxSize(100), levelupOptions);\n      levelup(store, {}, finishInitializing);\n    }\n  });\n\n  function finishInitializing(err, db) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db = db;\n\n    // Blocks, keyed by array index (not necessarily by block number) (0-based)\n    self.blocks = new LevelUpArrayAdapter(\"blocks\", self.db, blockserializer);\n\n    // Logs triggered in each block, keyed by block id (ids in the blocks array; not necessarily block number) (0-based)\n    self.blockLogs = new LevelUpArrayAdapter(\"blockLogs\", self.db, new BlockLogsSerializer(self));\n\n    // Block hashes -> block ids (ids in the blocks array; not necessarily block number) for quick lookup\n    self.blockHashes = new LevelUpObjectAdapter(\"blockHashes\", self.db);\n\n    // Transaction hash -> transaction objects\n    self.transactions = new LevelUpObjectAdapter(\"transactions\", self.db, txserializer);\n\n    // Transaction hash -> transaction receipts\n    self.transactionReceipts = new LevelUpObjectAdapter(\"transactionReceipts\", self.db, new ReceiptSerializer(self));\n\n    self.trie_db = new LevelUpObjectAdapter(\"trie_db\", self.db, bufferserializer, bufferserializer);\n\n    callback();\n  }\n};\n\nDatabase.prototype.close = function(callback) {\n  callback();\n};\n\nmodule.exports = Database;\n","var Sublevel = require(\"level-sublevel\");\nconst { LevelUpOutOfRangeError, BlockOutOfRangeError } = require(\"../utils/errorhelper\");\n\n// Level up adapter that looks like an array. Doesn't support inserts.\n\nfunction LevelUpArrayAdapter(name, db, serializer) {\n  this.db = Sublevel(db);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.serializer = serializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpArrayAdapter.prototype.length = function(callback) {\n  this.db.get(\"length\", function(err, result) {\n    if (err) {\n      if (err.notFound) {\n        return callback(null, 0);\n      } else {\n        return callback(err);\n      }\n    }\n\n    callback(null, result);\n  });\n};\n\nLevelUpArrayAdapter.prototype._get = function(key, callback) {\n  var self = this;\n  this.db.get(key, function(err, val) {\n    if (err) {\n      return callback(err);\n    }\n    self.serializer.decode(val, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype._put = function(key, value, callback) {\n  var self = this;\n  this.serializer.encode(value, function(err, encoded) {\n    if (err) {\n      return callback(err);\n    }\n    self.db.put(key, encoded, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.get = function(index, callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n    if (index >= length) {\n      // index out of range\n      let RangeError =\n        self.name === \"blocks\"\n          ? new BlockOutOfRangeError(index, length)\n          : new LevelUpOutOfRangeError(self.name, index, length);\n      return callback(RangeError);\n    }\n    self._get(index, callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.push = function(val, callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    // TODO: Do this in atomic batch.\n    self._put(length + \"\", val, function(err) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.put(\"length\", length + 1, callback);\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.pop = function(callback) {\n  var self = this;\n\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    var newLength = length - 1;\n\n    // TODO: Do this in atomic batch.\n    self._get(newLength + \"\", function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n      self.db.del(newLength + \"\", function(err) {\n        if (err) {\n          return callback(err);\n        }\n        self.db.put(\"length\", newLength, function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, val);\n        });\n      });\n    });\n  });\n};\n\nLevelUpArrayAdapter.prototype.last = function(callback) {\n  var self = this;\n  this.length(function(err, length) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (length === 0) {\n      return callback(null, null);\n    }\n\n    self._get(length - 1 + \"\", callback);\n  });\n};\n\nLevelUpArrayAdapter.prototype.first = function(callback) {\n  this._get(\"0\", callback);\n};\n\nmodule.exports = LevelUpArrayAdapter;\n","var Sublevel = require(\"level-sublevel\");\nvar async = require(\"async\");\n\nfunction LevelUpObjectAdapter(name, db, valueserializer, keyserializer, options) {\n  this.db = Sublevel(db, options);\n  this.db = this.db.sublevel(name);\n  this.name = name;\n  this.valueserializer = valueserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n  this.keyserializer = keyserializer || {\n    encode: function(val, callback) {\n      callback(null, val);\n    },\n    decode: function(val, callback) {\n      callback(null, val);\n    }\n  };\n}\n\nLevelUpObjectAdapter.prototype.get = function(key, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.get(encodedKey, function(err, val) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.valueserializer.decode(val, function(err, decodedValue) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, decodedValue);\n      });\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.put = function(key, value, options, callback) {\n  var self = this;\n\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.valueserializer.encode(value, function(err, encoded) {\n      if (err) {\n        return callback(err);\n      }\n\n      self.db.put(encodedKey, encoded, callback);\n    });\n  });\n};\n\nLevelUpObjectAdapter.prototype.set = LevelUpObjectAdapter.prototype.put;\n\nLevelUpObjectAdapter.prototype.del = function(key, callback) {\n  var self = this;\n\n  this.keyserializer.encode(key, function(err, encodedKey) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.db.del(encodedKey, callback);\n  });\n};\n\nLevelUpObjectAdapter.prototype.batch = function(array, options, callback) {\n  var self = this;\n\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nLevelUpObjectAdapter.prototype.isOpen = function() {\n  return true;\n};\n\nmodule.exports = LevelUpObjectAdapter;\n","module.exports = require(\"levelup\");","module.exports = require(\"encoding-down\");","var util = require(\"util\");\nvar AbstractLevelDOWN = require(\"abstract-leveldown\").AbstractLevelDOWN;\nvar async = require(\"async\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\n\nutil.inherits(FileDown, AbstractLevelDOWN);\n\nfunction FileDown(location) {\n  this.location = location;\n  AbstractLevelDOWN.call(this, location);\n}\n\nFileDown.prototype._open = function(options, callback) {\n  var self = this;\n  callback(null, self);\n};\n\nFileDown.prototype._put = function(key, value, options, callback) {\n  fs.writeFile(path.join(this.location, key), value, \"utf8\", callback);\n};\n\nFileDown.prototype._get = function(key, options, callback) {\n  fs.readFile(path.join(this.location, key), \"utf8\", function(err, data) {\n    if (err) {\n      return callback(new Error(\"NotFound\"));\n    }\n    callback(null, data);\n  });\n};\n\nFileDown.prototype._del = function(key, options, callback) {\n  fs.unlink(path.join(this.location, key), function(err) {\n    // Ignore when we try to delete a file that doesn't exist.\n    // I'm not sure why this happens. Worth looking into.\n    if (err) {\n      if (err.message.indexOf(\"ENOENT\") >= 0) {\n        return callback();\n      } else {\n        return callback(err);\n      }\n    }\n    callback();\n  });\n};\n\nFileDown.prototype._batch = function(array, options, callback) {\n  var self = this;\n  async.each(\n    array,\n    function(item, finished) {\n      if (item.type === \"put\") {\n        self.put(item.key, item.value, options, finished);\n      } else if (item.type === \"del\") {\n        self.del(item.key, options, finished);\n      } else {\n        finished(new Error(\"Unknown batch type\", item.type));\n      }\n    },\n    function(err) {\n      if (err) {\n        return callback(err);\n      }\n      callback();\n    }\n  );\n};\n\nmodule.exports = function(location) {\n  return new FileDown(location);\n};\n","module.exports = require(\"abstract-leveldown\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"cachedown\");","var txserializer = require(\"./txserializer\");\nvar async = require(\"async\");\nvar Block = require(\"ethereumjs-block\");\n\nmodule.exports = {\n  encode: function(block, done) {\n    var encoded = block.toJSON(true);\n\n    async.map(\n      block.transactions,\n      function(tx, finished) {\n        txserializer.encode(tx, finished);\n      },\n      function(err, transactions) {\n        if (err) {\n          return done(err);\n        }\n        encoded.transactions = transactions;\n        done(null, encoded);\n      }\n    );\n  },\n  decode: function(json, done) {\n    var transactions = json.transactions;\n    json.transactions = [];\n\n    var block = new Block(json);\n\n    async.eachSeries(\n      transactions,\n      function(txJson, finished) {\n        txserializer.decode(txJson, function(err, tx) {\n          if (err) {\n            return finished(err);\n          }\n          block.transactions.push(tx);\n          finished();\n        });\n      },\n      function(err) {\n        if (err) {\n          return done(err);\n        }\n\n        done(null, block);\n      }\n    );\n  }\n};\n","var utils = require(\"ethereumjs-util\");\nvar to = require(\"../utils/to\");\n\nmodule.exports = {\n  encode: function(val, cb) {\n    var hex = to.hex(val);\n    cb(null, hex);\n  },\n  decode: function(json, cb) {\n    cb(null, utils.toBuffer(json));\n  }\n};\n","var Log = require(\"../utils/log\");\nvar async = require(\"async\");\n\nfunction BlockLogsSerializer(database) {\n  this.database = database;\n}\n\nBlockLogsSerializer.prototype.encode = function(logs, done) {\n  logs = logs.map(function(log) {\n    return log.toJSON();\n  });\n\n  done(null, logs);\n};\n\nBlockLogsSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  if (json.length === 0) {\n    return done(null, []);\n  }\n\n  this.database.blockHashes.get(json[0].blockHash, function(err, blockIndex) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blocks.get(blockIndex, function(err, block) {\n      if (err) {\n        return done(err);\n      }\n\n      async.map(\n        json,\n        function(log, finished) {\n          finished(\n            null,\n            new Log({\n              block: block,\n              logIndex: log.logIndex,\n              transactionIndex: log.transactionIndex,\n              transactionHash: log.transactionHash,\n              address: log.address,\n              data: log.data,\n              topics: log.topics,\n              type: log.type\n            })\n          );\n        },\n        function(err, logs) {\n          if (err) {\n            return done(err);\n          }\n          done(null, logs);\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = BlockLogsSerializer;\n","var Receipt = require(\"../utils/receipt\");\nvar async = require(\"async\");\n\nfunction ReceiptSerializer(database) {\n  this.database = database;\n}\n\nReceiptSerializer.prototype.encode = function(receipt, done) {\n  done(null, receipt.toJSON());\n};\n\nReceiptSerializer.prototype.decode = function(json, done) {\n  var self = this;\n\n  this.database.transactions.get(json.transactionHash, function(err, tx) {\n    if (err) {\n      return done(err);\n    }\n\n    self.database.blockHashes.get(json.blockHash, function(err, blockIndex) {\n      if (err) {\n        return done(err);\n      }\n\n      async.parallel(\n        {\n          block: self.database.blocks.get.bind(self.database.blocks, blockIndex),\n          logs: self.database.blockLogs.get.bind(self.database.blockLogs, blockIndex)\n        },\n        function(err, result) {\n          if (err) {\n            return done(err);\n          }\n\n          done(\n            null,\n            new Receipt(\n              tx,\n              result.block,\n              result.logs,\n              json.gasUsed,\n              json.cumulativeGasUsed,\n              json.contractAddress,\n              json.status,\n              json.logsBloom\n            )\n          );\n        }\n      );\n    });\n  });\n};\n\nmodule.exports = ReceiptSerializer;\n","module.exports = require(\"tmp\");","var BlockchainDouble = require(\"../blockchain_double.js\");\nvar Account = require(\"ethereumjs-account\");\nvar Block = require(\"ethereumjs-block\");\nvar Log = require(\"./log.js\");\nvar Receipt = require(\"./receipt.js\");\nvar utils = require(\"ethereumjs-util\");\nvar ForkedStorageTrie = require(\"./forkedstoragetrie.js\");\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\nvar Transaction = require(\"./transaction\");\nvar async = require(\"async\");\nvar BN = require(\"bn.js\");\n\nvar inherits = require(\"util\").inherits;\n\ninherits(ForkedBlockchain, BlockchainDouble);\n\nfunction ForkedBlockchain(options) {\n  this.options = options || {};\n\n  if (options.fork == null) {\n    throw new Error(\"ForkedBlockchain must be passed a fork parameter.\");\n  }\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n  this.forkVersion = null;\n\n  if (typeof this.fork === \"string\") {\n    if (this.fork.indexOf(\"@\") >= 0) {\n      var split = this.fork.split(\"@\");\n      this.fork = split[0];\n      this.forkBlockNumber = parseInt(split[1]);\n    }\n\n    this.fork = new Web3.providers.HttpProvider(this.fork);\n  }\n\n  this.time = options.time;\n  this.storageTrieCache = {};\n\n  BlockchainDouble.call(this, options);\n\n  this.web3 = new Web3(this.fork);\n}\n\nForkedBlockchain.prototype.initialize = function(accounts, callback) {\n  var self = this;\n\n  this.web3.eth.net.getId(function(err, version) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.forkVersion = version;\n\n    BlockchainDouble.prototype.initialize.call(self, accounts, function(err) {\n      if (err) {\n        return callback(err);\n      }\n\n      // Unfortunately forking requires a bit of monkey patching, but it gets the job done.\n      self.vm.stateManager._lookupStorageTrie = self.lookupStorageTrie.bind(self);\n      self.vm.stateManager.cache._lookupAccount = self.getAccount.bind(self);\n      self.vm.stateManager.getContractCode = self.getCode.bind(self);\n      self.vm.stateManager.putContractCode = self.putCode.bind(self);\n\n      callback();\n    });\n  });\n};\n\nForkedBlockchain.prototype.createStateTrie = function(db, root) {\n  return new ForkedStorageTrie(db, root, {\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber,\n    blockchain: this\n  });\n};\n\nForkedBlockchain.prototype.createGenesisBlock = function(callback) {\n  var self = this;\n  var blockNumber = this.forkBlockNumber || \"latest\";\n\n  self.web3.eth.getBlock(blockNumber, function(err, json) {\n    if (err) {\n      return callback(err);\n    }\n\n    // If no start time was passed, set the time to where we forked from.\n    // We only want to do this if a block was explicitly passed. If a block\n    // number wasn't passed, then we're using the last block and the current time.\n    if (!self.time && self.forkBlockNumber) {\n      self.time = self.options.time = new Date(to.number(json.timestamp) * 1000);\n      self.setTime(self.time);\n    }\n\n    blockNumber = to.hex(json.number);\n\n    // Update the relevant block numbers\n    self.forkBlockNumber = self.options.forkBlockNumber = blockNumber;\n    self.stateTrie.forkBlockNumber = blockNumber;\n\n    self.createBlock(function(err, block) {\n      if (err) {\n        return callback(err);\n      }\n\n      block.header.number = utils.toBuffer(to.number(json.number) + 1);\n      block.header.parentHash = utils.toBuffer(json.hash);\n\n      callback(null, block);\n    });\n  });\n};\n\nForkedBlockchain.prototype.createForkedStorageTrie = function(address) {\n  address = to.hex(address);\n\n  var trie = new ForkedStorageTrie(this.data.trie_db, null, {\n    address: address,\n    stateTrie: this.stateTrie,\n    blockchain: this,\n    fork: this.fork,\n    forkBlockNumber: this.forkBlockNumber\n  });\n\n  this.storageTrieCache[address] = trie;\n\n  return trie;\n};\n\nForkedBlockchain.prototype.lookupStorageTrie = function(address, callback) {\n  address = to.hex(address);\n\n  if (this.storageTrieCache[address] != null) {\n    return callback(null, this.storageTrieCache[address]);\n  }\n\n  callback(null, this.createForkedStorageTrie(address));\n};\n\nForkedBlockchain.prototype.isFallbackBlock = function(value, callback) {\n  var self = this;\n\n  self.getEffectiveBlockNumber(value, function(err, number) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, number <= to.number(self.forkBlockNumber));\n  });\n};\n\nForkedBlockchain.prototype.isBlockHash = function(value) {\n  return typeof value === \"string\" && value.indexOf(\"0x\") === 0 && value.length > 42;\n};\n\nForkedBlockchain.prototype.isFallbackBlockHash = function(value, callback) {\n  var self = this;\n\n  if (!this.isBlockHash(value)) {\n    return callback(null, false);\n  }\n\n  self.data.blockHashes.get(value, function(err, blockIndex) {\n    if (err) {\n      if (err.notFound) {\n        // If the block isn't found in our database, then it must be a fallback block.\n        return callback(null, true);\n      } else {\n        return callback(err);\n      }\n    }\n    callback(null, false);\n  });\n};\n\nForkedBlockchain.prototype.getFallbackBlock = function(numberOrHash, cb) {\n  var self = this;\n\n  // This function sometimes gets passed hex values that aren't long enough to\n  // be a block hash. In that case, let's convert them to a big number so Web3\n  // doesn't get stopped up.\n  if (typeof numberOrHash === \"string\" && numberOrHash.length < 66) {\n    numberOrHash = self.web3.utils.toBN(numberOrHash);\n  }\n\n  self.web3.eth.getBlock(numberOrHash, true, function(err, json) {\n    if (err) {\n      return cb(err);\n    }\n\n    if (json == null) {\n      return cb();\n    }\n\n    var block = new Block();\n\n    block.header.parentHash = utils.toBuffer(json.parentHash);\n    block.header.uncleHash = utils.toBuffer(json.sha3Uncles);\n    block.header.coinbase = utils.toBuffer(json.miner);\n    block.header.stateRoot = utils.toBuffer(json.stateRoot); // Should we include the following three?\n    block.header.transactionTrie = utils.toBuffer(json.transactionsRoot);\n    block.header.receiptTrie = utils.toBuffer(json.receiptsRoot);\n    block.header.bloom = utils.toBuffer(json.logsBloom);\n    block.header.difficulty = utils.toBuffer(\"0x\" + json.totalDifficulty.toString(16)); // BigNumber\n    block.header.number = utils.toBuffer(json.number);\n    block.header.gasLimit = utils.toBuffer(json.gasLimit);\n    block.header.gasUsed = utils.toBuffer(json.gasUsed);\n    block.header.timestamp = utils.toBuffer(json.timestamp);\n    block.header.extraData = utils.toBuffer(json.extraData);\n\n    (json.transactions || []).forEach(function(txJson, index) {\n      block.transactions.push(Transaction.fromJSON(txJson, Transaction.types.real));\n    });\n\n    // Fake block. Let's do the worst.\n    // TODO: Attempt to fill out all block data so as to produce the same hash! (can we?)\n    block.hash = function() {\n      return utils.toBuffer(json.hash);\n    };\n\n    cb(null, block);\n  });\n};\n\nForkedBlockchain.prototype.getBlock = function(number, callback) {\n  var self = this;\n\n  this.isFallbackBlockHash(number, function(err, isFallbackBlockHash) {\n    if (err) {\n      return callback(err);\n    }\n    if (isFallbackBlockHash) {\n      return self.getFallbackBlock(number, callback);\n    }\n\n    self.isFallbackBlock(number, function(err, isFallbackBlock) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (isFallbackBlock) {\n        return self.getFallbackBlock(number, callback);\n      }\n\n      // If we don't have string-based a block hash, turn what we do have into a number\n      // before sending it to getBlock.\n      function getBlockReference(value, callback) {\n        if (!self.isBlockHash(value)) {\n          self.getRelativeBlockNumber(value, callback);\n        } else {\n          callback(null, value);\n        }\n      }\n\n      getBlockReference(number, function(err, blockReference) {\n        if (err) {\n          return callback(err);\n        }\n\n        BlockchainDouble.prototype.getBlock.call(self, blockReference, callback);\n      });\n    });\n  });\n};\n\nForkedBlockchain.prototype.getStorage = function(address, key, number, callback) {\n  this.lookupStorageTrie(address, function(err, trie) {\n    if (err) {\n      return callback(err);\n    }\n    trie.get(key, callback);\n  });\n};\n\nForkedBlockchain.prototype.getCode = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  if (!number) {\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n      // If we've stored the value and we're looking at one of our stored blocks,\n      // get it from our stored data.\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getCode.call(self, address, number, callback);\n      } else {\n        // Else, we need to fetch it from web3. If our number is greater than\n        // the fork, let's just use \"latest\".\n        if (number > to.number(self.forkBlockNumber)) {\n          number = \"latest\";\n        }\n\n        self.fetchCodeFromFallback(address, number, function(err, code) {\n          if (code) {\n            code = utils.toBuffer(code);\n          }\n          callback(err, code);\n        });\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.putCode = function(address, value, callback) {\n  // This is a bit of a hack. We need to bypass the vm's\n  // _lookupAccount call that vm.stateManager.putContractCode() uses.\n  // This means we have to do some things ourself. The last call\n  // to self.stateTrie.put() at the bottom is important because\n  // we can't just be satisfied putting it in the cache.\n\n  var self = this;\n  self.vm.stateManager.cache.flush(() => {\n    address = utils.toBuffer(address);\n    this.stateTrie.get(address, function(err, data) {\n      if (err) {\n        return callback(err);\n      }\n\n      var account = new Account(data);\n      account.setCode(self.stateTrie, value, function(err, result) {\n        if (err) {\n          return callback(err);\n        }\n\n        self.stateTrie.put(address, account.serialize(), function(err) {\n          if (err) {\n            return callback(err);\n          }\n\n          // Ensure the cache updates as well.\n          self.vm.stateManager.putAccount(address, account, callback);\n        });\n      });\n    });\n  });\n};\n\nForkedBlockchain.prototype.getAccount = function(address, number, callback) {\n  var self = this;\n\n  if (typeof number === \"function\") {\n    callback = number;\n    number = \"latest\";\n  }\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    number = effective;\n\n    // If the account doesn't exist in our state trie, get it off the wire.\n    self.stateTrie.keyExists(address, function(err, exists) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (exists && number > to.number(self.forkBlockNumber)) {\n        BlockchainDouble.prototype.getAccount.call(self, address, number, function(err, acc) {\n          if (err) {\n            return callback(err);\n          }\n          callback(null, acc);\n        });\n      } else {\n        self.fetchAccountFromFallback(address, number, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransaction = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransaction.call(this, hash, function(err, tx) {\n    if (err) {\n      return callback(err);\n    }\n    if (tx != null) {\n      return callback(null, tx);\n    }\n\n    self.web3.eth.getTransaction(hash, function(err, result) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (result) {\n        result = Transaction.fromJSON(result, Transaction.types.signed);\n      }\n\n      callback(null, result);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getTransactionReceipt = function(hash, callback) {\n  var self = this;\n  BlockchainDouble.prototype.getTransactionReceipt.call(this, hash, function(err, receipt) {\n    if (err) {\n      return callback(err);\n    }\n    if (receipt) {\n      return callback(null, receipt);\n    }\n\n    self.web3.eth.getTransactionReceipt(hash, function(err, receiptJson) {\n      if (err) {\n        return callback(err);\n      }\n      if (!receiptJson) {\n        return callback();\n      }\n\n      async.parallel(\n        {\n          tx: self.getTransaction.bind(self, hash),\n          block: self.getBlock.bind(self, receiptJson.blockNumber)\n        },\n        function(err, result) {\n          if (err) {\n            return callback(err);\n          }\n\n          var logs = receiptJson.logs.map(function(log) {\n            return new Log(log);\n          });\n\n          var receipt = new Receipt(\n            result.tx,\n            result.block,\n            logs,\n            receiptJson.gasUsed,\n            receiptJson.cumulativeGasUsed,\n            receiptJson.contractAddress,\n            receiptJson.status,\n            to.hex(receiptJson.logsBloom)\n          );\n\n          callback(null, receipt);\n        }\n      );\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchAccountFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  async.parallel(\n    {\n      code: this.fetchCodeFromFallback.bind(this, address, blockNumber),\n      balance: this.fetchBalanceFromFallback.bind(this, address, blockNumber),\n      nonce: this.fetchNonceFromFallback.bind(this, address, blockNumber)\n    },\n    function(err, results) {\n      if (err) {\n        return callback(err);\n      }\n\n      var code = results.code;\n      var balance = results.balance;\n      var nonce = results.nonce;\n\n      var account = new Account({\n        nonce: nonce,\n        balance: balance\n      });\n\n      // This puts the code on the trie, keyed by the hash of the code.\n      // It does not actually link an account to code in the trie.\n      account.setCode(self.stateTrie, utils.toBuffer(code), function(err) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, account);\n      });\n    }\n  );\n};\n\nForkedBlockchain.prototype.fetchCodeFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getCode(address, safeBlockNumber, function(err, code) {\n      if (err) {\n        return callback(err);\n      }\n\n      code = \"0x\" + utils.toBuffer(code).toString(\"hex\");\n      callback(null, code);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchBalanceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getBalance(address, safeBlockNumber, function(err, balance) {\n      if (err) {\n        return callback(err);\n      }\n\n      balance = \"0x\" + new BN(balance).toString(16);\n      callback(null, balance);\n    });\n  });\n};\n\nForkedBlockchain.prototype.fetchNonceFromFallback = function(address, blockNumber, callback) {\n  var self = this;\n  address = to.hex(address);\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = this.forkBlockNumber;\n  }\n\n  this.getSafeFallbackBlockNumber(blockNumber, function(err, safeBlockNumber) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.web3.eth.getTransactionCount(address, safeBlockNumber, function(err, nonce) {\n      if (err) {\n        return callback(err);\n      }\n\n      nonce = \"0x\" + self.web3.utils.toBN(nonce).toString(16);\n      callback(null, nonce);\n    });\n  });\n};\n\nForkedBlockchain.prototype.getHeight = function(callback) {\n  this.latestBlock(function(err, block) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, to.number(block.header.number));\n  });\n};\n\nForkedBlockchain.prototype.getRelativeBlockNumber = function(number, callback) {\n  var self = this;\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    callback(null, effective - to.number(self.forkBlockNumber) - 1);\n  });\n};\n\nForkedBlockchain.prototype.getSafeFallbackBlockNumber = function(blockNumber, callback) {\n  var forkBlockNumber = to.number(this.forkBlockNumber);\n\n  if (blockNumber == null) {\n    return callback(null, forkBlockNumber);\n  }\n\n  this.getEffectiveBlockNumber(blockNumber, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n    if (effective > forkBlockNumber) {\n      effective = forkBlockNumber;\n    }\n\n    callback(null, effective);\n  });\n};\n\nForkedBlockchain.prototype.getBlockLogs = function(number, callback) {\n  var self = this;\n\n  this.getEffectiveBlockNumber(number, function(err, effective) {\n    if (err) {\n      return callback(err);\n    }\n\n    self.getRelativeBlockNumber(effective, function(err, relative) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (relative < 0) {\n        self.getBlock(number, function(err, block) {\n          if (err) {\n            return callback(err);\n          }\n\n          self.web3.currentProvider.send(\n            {\n              jsonrpc: \"2.0\",\n              method: \"eth_getLogs\",\n              params: [\n                {\n                  fromBlock: to.hex(number),\n                  toBlock: to.hex(number)\n                }\n              ],\n              id: new Date().getTime()\n            },\n            function(err, res) {\n              if (err) {\n                return callback(err);\n              }\n\n              var logs = res.result.map(function(log) {\n                // To make this result masquerade as the right information.\n                log.block = block;\n                return new Log(log);\n              });\n\n              callback(null, logs);\n            }\n          );\n        });\n      } else {\n        BlockchainDouble.prototype.getBlockLogs.call(self, relative, callback);\n      }\n    });\n  });\n};\n\nForkedBlockchain.prototype._checkpointTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._checkpointTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n    trie.customCheckpoint();\n  });\n};\n\nForkedBlockchain.prototype._revertTrie = function() {\n  var self = this;\n\n  BlockchainDouble.prototype._revertTrie.call(this);\n\n  Object.keys(this.storageTrieCache).forEach(function(address) {\n    var trie = self.storageTrieCache[address];\n\n    // We're trying to revert to a point before this trie was created.\n    // Let's just remove the trie.\n    if (trie.checkpoints.length === 0) {\n      delete self.storageTrieCache[address];\n    } else {\n      trie.customRevert();\n    }\n  });\n};\n\nmodule.exports = ForkedBlockchain;\n","var MerklePatriciaTree = require(\"merkle-patricia-tree\");\nvar utils = require(\"ethereumjs-util\");\nvar inherits = require(\"util\").inherits;\nvar Web3 = require(\"web3\");\nvar to = require(\"./to.js\");\n\ninherits(ForkedStorageTrie, MerklePatriciaTree);\n\nfunction ForkedStorageTrie(db, root, options) {\n  MerklePatriciaTree.call(this, db, root);\n\n  this.address = options.address;\n\n  this.fork = options.fork;\n  this.forkBlockNumber = options.forkBlockNumber;\n\n  this.blockchain = options.blockchain;\n\n  this.web3 = new Web3();\n  this.web3.setProvider(this.fork);\n\n  this.checkpoints = [];\n}\n\nForkedStorageTrie.prototype.keyExists = function(key, callback) {\n  key = utils.toBuffer(key);\n\n  this.findPath(key, function(err, node, remainder, stack) {\n    var exists = false;\n    if (node && remainder.length === 0) {\n      exists = true;\n    }\n    callback(err, exists);\n  });\n};\n\n// Note: This overrides a standard method whereas the other methods do not.\nForkedStorageTrie.prototype.get = function(key, blockNumber, callback) {\n  var self = this;\n\n  // Allow an optional blockNumber\n  if (typeof blockNumber === \"function\") {\n    callback = blockNumber;\n    blockNumber = self.forkBlockNumber;\n  }\n\n  // For geth; https://github.com/ethereumjs/ethereumjs-util/issues/79\n  blockNumber = to.rpcQuantityHexString(blockNumber);\n\n  key = utils.toBuffer(key);\n\n  // If the account doesn't exist in our state trie, get it off the wire.\n  this.keyExists(key, function(err, exists) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (exists) {\n      MerklePatriciaTree.prototype.get.call(self, key, function(err, r) {\n        callback(err, r);\n      });\n    } else {\n      // If this is the main trie, get the whole account.\n      if (self.address == null) {\n        self.blockchain.fetchAccountFromFallback(key, blockNumber, function(err, account) {\n          if (err) {\n            return callback(err);\n          }\n\n          callback(null, account.serialize());\n        });\n      } else {\n        self.web3.eth.getStorageAt(to.hex(self.address), to.hex(key), blockNumber, function(err, value) {\n          if (err) {\n            return callback(err);\n          }\n\n          value = utils.toBuffer(value);\n          value = utils.rlp.encode(value);\n\n          callback(null, value);\n        });\n      }\n    }\n  });\n};\n\n// I don't want checkpoints to be removed by commits.\n// Note: For some reason, naming this function checkpoint()\n// -- overriding the default function -- prevents it from\n// being called.\nForkedStorageTrie.prototype.customCheckpoint = function() {\n  this.checkpoints.push(this.root);\n};\n\nForkedStorageTrie.prototype.customRevert = function() {\n  this.root = this.checkpoints.pop();\n};\n\nmodule.exports = ForkedStorageTrie;\n","module.exports = require(\"web3-core\");","module.exports = require(\"web3-eth\");","module.exports = require(\"web3-net\");","module.exports = require(\"web3-eth-personal\");","module.exports = require(\"web3-shh\");","module.exports = require(\"web3-bzz\");","module.exports = require(\"web3-utils\");","module.exports = require(\"bn.js\");","module.exports = require(\"eth-sig-util\");","module.exports = {\n  // Mimics crypto.random bytes, but takes in a random number generator\n  // as its second parameter. rng is expected to be a function that takes\n  // no parameters and returns a result like Math.random().\n  // This is important because it allows for a seeded random number generator.\n  // Since this is a mock RPC library, the rng doesn't need to be cryptographically secure.\n  randomBytes: function(length, rng) {\n    var buf = [];\n\n    for (var i = 0; i < length; i++) {\n      buf.push(rng() * 255);\n    }\n\n    return Buffer.from(buf);\n  },\n\n  randomAlphaNumericString: function(length, rng) {\n    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n    let text = \"\";\n\n    for (var i = 0; i < length; i++) {\n      text += alphabet.charAt(Math.floor((rng || Math.random)() * alphabet.length));\n    }\n\n    return text;\n  }\n};\n","// this replaces `eth-block-tracker` in the provider-engine, as that block tracker is meant to work with\n// an external provider instance\n\nconst EventEmitter = require(\"events\");\nvar blockHelper = require(\"./utils/block_helper\");\n\nfunction GanacheBlockTracker(opts) {\n  opts = opts || {};\n  EventEmitter.apply(this);\n  if (!opts.blockchain) {\n    throw new Error(\"RpcBlockTracker - no blockchain specified.\");\n  }\n  if (!opts.blockchain.on) {\n    throw new Error(\"RpcBlockTracker - blockchain is not an EventEmitter.\");\n  }\n  this._blockchain = opts.blockchain;\n  this.start = this.start.bind(this);\n  this.stop = this.stop.bind(this);\n  this.getTrackingBlock = this.getTrackingBlock.bind(this);\n  this.awaitCurrentBlock = this.awaitCurrentBlock.bind(this);\n  this._setCurrentBlock = this._setCurrentBlock.bind(this);\n}\n\nGanacheBlockTracker.prototype = Object.create(EventEmitter.prototype);\nGanacheBlockTracker.prototype.constructor = GanacheBlockTracker;\n\nGanacheBlockTracker.prototype.getTrackingBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.getCurrentBlock = function() {\n  return this._currentBlock;\n};\n\nGanacheBlockTracker.prototype.awaitCurrentBlock = function() {\n  const self = this;\n  // return if available\n  if (this._currentBlock) {\n    return this._currentBlock;\n  }\n  // wait for \"sync\" event\n  return new Promise((resolve) => this.once(\"block\", resolve)).then(() => self._currentBlock);\n};\n\nGanacheBlockTracker.prototype.start = function(opts = {}) {\n  this._blockchain.on(\"block\", this._setCurrentBlock);\n  return Promise.resolve();\n};\n\nGanacheBlockTracker.prototype.stop = function() {\n  this._isRunning = false;\n  this._blockchain.removeListener(\"block\", this._setCurrentBlock);\n};\n\n//\n// private\n//\n\nGanacheBlockTracker.prototype._setCurrentBlock = function(newBlock) {\n  let block = blockHelper.toJSON(newBlock, true);\n  if (this._currentBlock && this._currentBlock.hash === block.hash) {\n    return;\n  }\n  const oldBlock = this._currentBlock;\n  this._currentBlock = block;\n  this.emit(\"latest\", block);\n  this.emit(\"sync\", { block, oldBlock });\n  this.emit(\"block\", block);\n};\n\nmodule.exports = GanacheBlockTracker;\n","// make sourcemaps work!\nrequire(\"source-map-support/register\");\n\nvar Provider = require(\"./provider\");\nvar webSocketServer = require(\"./webSocketServer\");\nvar httpServer = require(\"./httpServer\");\nvar _ = require(\"lodash\");\n\nmodule.exports = {\n  create: function(options) {\n    options = _applyDefaultOptions(options || {});\n\n    var logger = options.logger;\n    var provider = new Provider(options);\n\n    var server = httpServer(provider, logger);\n    server.keepAliveTimeout = options.keepAliveTimeout;\n\n    let connectionCounter = 0;\n    const connections = {};\n    server.on(\"connection\", (conn) => {\n      let key = connectionCounter++;\n      connections[key] = conn;\n      conn.on(\"close\", () => delete connections[key]);\n    });\n\n    var oldListen = server.listen;\n\n    server.listen = function() {\n      var args = Array.prototype.slice.call(arguments);\n      var callback = function() {};\n      if (args.length > 0) {\n        var last = args[args.length - 1];\n        if (typeof last === \"function\") {\n          callback = args.pop();\n        }\n      }\n\n      var intermediary = function(err) {\n        if (err) {\n          return callback(err);\n        }\n        server.provider.manager.waitForInitialization(callback);\n      };\n\n      args.push(intermediary);\n\n      oldListen.apply(server, args);\n    };\n\n    server.provider = provider;\n\n    if (options.ws) {\n      webSocketServer(server, provider, logger);\n    }\n\n    var oldClose = server.close;\n\n    server.close = function(callback) {\n      var args = Array.prototype.slice.call(arguments);\n      oldClose.apply(server, args);\n\n      server.provider.close(function(err) {\n        if (err) {\n          return callback(err);\n        }\n        Object.keys(connections).forEach((key) => {\n          try {\n            connections[key].destroy();\n          } catch (error) {}\n        });\n      });\n    };\n\n    return server;\n  }\n};\n\nconst defaultOptions = {\n  logger: {\n    log: function() {}\n  },\n  ws: true,\n  keepAliveTimeout: 5000\n};\n\nvar _applyDefaultOptions = function(options) {\n  return _.merge({}, defaultOptions, options);\n};\n","var WebSocketServer = require(\"websocket\").server;\n\nmodule.exports = function(httpServer, provider, logger) {\n  var connectionManager = new ConnectionManager(provider, logger);\n\n  var wsServer = new WebSocketServer({\n    httpServer: httpServer,\n    autoAcceptConnections: true\n  });\n\n  wsServer.on(\"connect\", connectionManager.manageConnection);\n\n  return wsServer;\n};\n\nfunction ConnectionManager(provider, logger) {\n  const self = this;\n  self.provider = provider;\n  self.logger = logger;\n  self.connectionsBySubscriptionId = {};\n  self.connections = {};\n  self.connectionCounter = 0;\n\n  self._updateSubscriptions = self._updateSubscriptions.bind(self);\n  self.manageConnection = self.manageConnection.bind(self);\n  self._logPayload = self._logPayload.bind(self);\n  self._handleRequest = self._handleRequest.bind(self);\n\n  provider.on(\"data\", function(err, notification) {\n    if (err) {\n      return;\n    }\n    self._updateSubscriptions(notification);\n  });\n}\n\nConnectionManager.prototype.manageConnection = function(connection) {\n  const self = this;\n  connection.id = ++self.connectionCounter;\n  self.connections[connection.id] = {\n    connection: connection,\n    subscriptions: {}\n  };\n\n  connection.on(\"message\", function(message) {\n    try {\n      var payload = JSON.parse(message.utf8Data);\n    } catch (e) {\n      connection.reject(400, \"Bad Request\");\n    }\n\n    self._logPayload(payload);\n    self._handleRequest(connection, payload);\n  });\n\n  connection.on(\"close\", function() {\n    // remove subscriptions\n    Object.keys(self.connections[connection.id].subscriptions).forEach((subscriptionId) => {\n      self.provider.send(\n        {\n          jsonrpc: \"2.0\",\n          method: \"eth_unsubscribe\",\n          params: [subscriptionId],\n          id: new Date().getTime()\n        },\n        function(err, result) {\n          if (err) {\n            return;\n          }\n          delete self.connectionsBySubscriptionId[subscriptionId];\n        }\n      );\n    });\n\n    delete self.connections[connection.id];\n  });\n};\n\nConnectionManager.prototype._handleRequest = function(connection, payload) {\n  const self = this;\n\n  // handle subscription requests, otherwise delegate to provider\n  switch (payload.method) {\n    case \"eth_subscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (!err && result.result) {\n          self.connections[connection.id].subscriptions[result.result] = true;\n          self.connectionsBySubscriptionId[result.result] = self.connections[connection.id];\n        }\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    case \"eth_unsubscribe\":\n      self.provider.send(payload, function(err, result) {\n        if (err || result.error) {\n          if (connection && connection.send) {\n            connection.send(JSON.stringify(result));\n          }\n          return;\n        }\n\n        delete self.connections[connection.id].subscriptions[payload.params[0]];\n        delete self.connectionsBySubscriptionId[payload.params[0]];\n\n        connection.send(JSON.stringify(result));\n      });\n      break;\n    default:\n      self.provider.send(payload, function(_, result) {\n        connection.send(JSON.stringify(result));\n      });\n  }\n};\n\n// Log messages that come into the TestRPC via http\nConnectionManager.prototype._logPayload = function(payload) {\n  const self = this;\n  if (payload instanceof Array) {\n    // Batch request\n    for (var i = 0; i < payload.length; i++) {\n      var item = payload[i];\n      self.logger.log(item.method);\n    }\n  } else {\n    self.logger.log(payload.method);\n  }\n};\n\nConnectionManager.prototype._updateSubscriptions = function(notification) {\n  this.connectionsBySubscriptionId[notification.params.subscription].connection.send(JSON.stringify(notification));\n};\n","module.exports = require(\"websocket\");","var http = require(\"http\");\n\nmodule.exports = function(provider, logger) {\n  var server = http.createServer(function(request, response) {\n    var method = request.method;\n    var body = [];\n\n    request\n      .on(\"data\", function(chunk) {\n        body.push(chunk);\n      })\n      .on(\"end\", function() {\n        body = Buffer.concat(body).toString();\n        // At this point, we have the headers, method, url and body, and can now\n        // do whatever we need to in order to respond to this request.\n\n        var headers = {\n          \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept, User-Agent\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"*\"\n        };\n\n        switch (method) {\n          case \"OPTIONS\":\n            headers[\"Content-Type\"] = \"text/plain\";\n            response.writeHead(200, headers);\n            response.end(\"\");\n            break;\n          case \"POST\":\n            // console.log(\"Request coming in:\", body);\n\n            var payload;\n            try {\n              payload = JSON.parse(body);\n            } catch (e) {\n              headers[\"Content-Type\"] = \"text/plain\";\n              response.writeHead(400, headers);\n              response.end(\"400 Bad Request\");\n              return;\n            }\n\n            // Log messages that come into the TestRPC via http\n            if (payload instanceof Array) {\n              // Batch request\n              for (var i = 0; i < payload.length; i++) {\n                var item = payload[i];\n                logger.log(item.method);\n              }\n            } else {\n              logger.log(payload.method);\n            }\n\n            provider.send(payload, function(_, result) {\n              headers[\"Content-Type\"] = \"application/json\";\n              response.writeHead(200, headers);\n              response.end(JSON.stringify(result));\n            });\n\n            break;\n          default:\n            response.writeHead(400, {\n              \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept, User-Agent\",\n              \"Access-Control-Allow-Origin\": \"*\",\n              \"Access-Control-Allow-Methods\": \"*\",\n              \"Content-Type\": \"text/plain\"\n            });\n            response.end(\"400 Bad Request\");\n            break;\n        }\n      });\n  });\n\n  server.ganacheProvider = provider;\n  return server;\n};\n","module.exports = require(\"http\");"],"sourceRoot":""}